---
- name: Including Debian OS trusted certificates tasks...
  when: ansible_os_family == "Debian"
  block:
    - name: Copying trusted certificates(s) to {{ inventory_hostname }}...
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ unix_os_family_trusted_certificates_paths[ansible_os_family] }}/{{ item.name }}.crt"
        mode: "0644"
      loop: "{{ trusted_certificates_list }}"
      when: not item.src.startswith('http')

    - name: Downloading trusted certificates(s) to {{ inventory_hostname }}...
      ansible.builtin.get_url:
        url: "{{ item.src }}"
        dest: "{{ unix_os_family_trusted_certificates_paths[ansible_os_family] }}/{{ item.name }}.crt"
        mode: "0644"
        timeout: 60
        validate_certs: "{{ trusted_certificates_validate_certs }}"
      loop: "{{ trusted_certificates_list }}"
      when: item.src.startswith('http')

    - name: Updating CA certificates...
      ansible.builtin.command: update-ca-certificates --fresh
      changed_when: true

- name: Adding trusted certificates for Archlinux based OS...
  when: ansible_os_family == "Archlinux"
  block:
    - name: Copying trusted certificates(s) to {{ inventory_hostname }}...
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ unix_os_family_trusted_certificates_paths[ansible_os_family] }}/{{ item.name }}.crt"
        mode: "0644"
      loop: "{{ trusted_certificates_list }}"
      when: not item.src.startswith('http')

    - name: Downloading trusted certificates(s) to {{ inventory_hostname }}...
      ansible.builtin.get_url:
        url: "{{ item.src }}"
        dest: "{{ unix_os_family_trusted_certificates_paths[ansible_os_family] }}/{{ item.name }}.crt"
        mode: "0644"
        timeout: 60
        validate_certs: "{{ trusted_certificates_validate_certs }}"
      loop: "{{ trusted_certificates_list }}"
      when: item.src.startswith('http')

    - name: Trusting installed certificates...
      ansible.builtin.command: trust extract-compat
      changed_when: true

- name: Including RedHat trusted certificates tasks...
  when: ansible_os_family == "RedHat"
  block:
    - name: Copying trusted certificates(s) to {{ inventory_hostname }}...
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ unix_os_family_trusted_certificates_paths[ansible_os_family] }}/{{ item.name }}.crt"
        mode: "0644"
      loop: "{{ trusted_certificates_list }}"
      when: not item.src.startswith('http')

    - name: Downloading trusted certificates(s) to {{ inventory_hostname }}...
      ansible.builtin.get_url:
        url: "{{ item.src }}"
        dest: "{{ unix_os_family_trusted_certificates_paths[ansible_os_family] }}/{{ item.name }}.crt"
        mode: "0644"
        timeout: 60
        validate_certs: "{{ trusted_certificates_validate_certs }}"
      loop: "{{ trusted_certificates_list }}"
      when: item.src.startswith('http')

    - name: Updating CA certificates...
      ansible.builtin.command: update-ca-trust extract
      changed_when: true

- name: Adding trusted certificates for FreeBSD based OS...
  when: ansible_os_family == "FreeBSD"
  block:
    - name: Creating folder - {{ unix_os_family_trusted_certificates_paths[ansible_os_family] }}...
      ansible.builtin.file:
        path: "{{ unix_os_family_trusted_certificates_paths[ansible_os_family] }}"
        state: directory
        mode: "0755"

    - name: Copying trusted certificates(s) to {{ inventory_hostname }}...
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ unix_os_family_trusted_certificates_paths[ansible_os_family] }}/{{ item.name }}.crt"
        mode: "0644"
      loop: "{{ trusted_certificates_list }}"
      when: not item.src.startswith('http')

    - name: Downloading trusted certificates(s) to {{ inventory_hostname }}...
      ansible.builtin.get_url:
        url: "{{ item.src }}"
        dest: "{{ unix_os_family_trusted_certificates_paths[ansible_os_family] }}/{{ item.name }}.crt"
        mode: "0644"
        timeout: 60
        validate_certs: "{{ trusted_certificates_validate_certs }}"
      loop: "{{ trusted_certificates_list }}"
      when: item.src.startswith('http')

    - name: Updating CA certificates...
      ansible.builtin.command: certctl rehash
      changed_when: true

- name: Adding trusted certificate(s) to Java keystore(s)...
  when: trusted_certificates_to_jks
  block:
    - name: Installing keytool...
      ansible.builtin.package:
        name: default-jdk
        update_cache: true
      register: keytool_install
      until: not keytool_install.failed
      retries: 10
      delay: 3

    - name: Creating /srv/certs folder...
      ansible.builtin.file:
        path: /srv/certs
        state: directory
        mode: "0755"

    - name: Getting all trusted CAs
      ansible.builtin.find:
        paths: "{{ unix_os_family_trusted_certificates_paths[ansible_os_family] }}"
      register: trusted_cas

    - name: Creating a JKS truststore from following certificates...
      community.general.java_cert:
        cert_path: "{{ trusted_certificates_jks.path }}"
        cert_alias: "{{ trusted_certificates_jks.path }}"
        keystore_path: /srv/certs/{{ trusted_certificates_jks_truststore_name }}.jks
        keystore_pass: changeit # Since the truststore contains public keys I don't see much point in setting different password than JKS default
        state: present
        keystore_create: true
        trust_cacert: true
      loop: "{{ trusted_cas.files }}"
      loop_control:
        label: "{{ trusted_certificates_jks.path }}"
        loop_var: trusted_certificates_jks
