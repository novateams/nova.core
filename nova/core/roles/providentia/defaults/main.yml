---
# host config
providentia_install_docker: true # whether to install nova.core.docker on host
providentia_external_docker_network: false # Set to true if providentia should use an external docker network with the default config below
providentia_external_docker_network_config:
  networks:
    default:
      name: local-network # Comes from nova.core.docker
      external: true

# dependencies
providentia_builtin_keycloak: true # Should keycloak instance be deployed with Providentia
providentia_builtin_database: true # Should postgres instance be deployed with Providentia
providentia_builtin_reverse_proxy: true # Should a reverse proxy be deployed with Providentia

# dependencies config
providentia_builtin_keycloak_fqdn: "keycloak.{{ providentia_app_fqdn }}" # The FQDN for builtin keycloak instance
providentia_builtin_keycloak_admin_password: secret # builtin keycloak admin user password
providentia_builtin_database_db_password: secret # builtin keycloak db credentials (defined in providentia repo)
providentia_builtin_reverse_proxy_tls_mode: selfsigned # one of `selfsigned` or `pregenerated`
providentia_builtin_reverse_proxy_tls_pregenerated_cert: # path to TLS cert on host
providentia_builtin_reverse_proxy_tls_pregenerated_key: # path to TLS key on host

# deployment config
# if providentia_deploy_branch is set, the code is cloned from github and image will be built on host
# the value accepts a gitref and can be used deploy other tags or branches
# otherwise, the image built in github will be used instead
providentia_deploy_branch:
providentia_image_version: latest
providentia_install_dir: /srv/providentia # path where providentia will be installed
providentia_install_dir_git: /srv/providentia.git # path where git configuration will be stored

providentia_app_fqdn: "{{ fqdn }}" # fqdn for deployed instance

# full database URL used by the app, defaults to builtin postgres
providentia_db_url: postgres://providentia:{{ providentia_builtin_database_db_password }}@postgresql/providentia?pool=5

providentia_sentry_dsn: # Sentry exception tracking endpoint
providentia_sentry_env: production # Sentry production value

# app config
# The secret key base for the Rails app. Will be auto-generated if left blank
providentia_secret_key_base: "{{ lookup('password', '/dev/null length=96 chars=hexdigits') }}"
providentia_enabled_features: []

# app config (SSO)
# The URL for OpenID Connect endpoint (.well-known should be under this)
providentia_oidc_issuer: "http://{{ providentia_builtin_keycloak_fqdn }}/realms/Providentia"

providentia_auth_mode: resource_access # One of `resource_access` or `scope`, specifying where in access token the authorization fields are located
providentia_oidc_client_id: Providentia # The client ID for OpenID Connect
providentia_oidc_client_secret: 00000000-0000-0000-0000-000000000000 # The client secret for OpenID Connect (depending on configuration)
providentia_resource_env_creator: Environment_Creator # The role name, which allows creating new environments in Providentia
providentia_oidc_extra_scopes: "" # list of extra scopes to request from OpenID Connect, eg. "profile email"
providentia_oidc_authorization_roles_claim: resource_access.Providentia.roles # The claim in the OpenID Connect token that contains the roles, defaults to `resource_access.Providentia.roles` for Keycloak

# The prefix for authorization roles (groups)
providentia_resource_prefix: Providentia_

# The suffix of the group name, which allows login access to Providentia eg. Providentia_User
# This group should be assigned to all users who should have access to Providentia, even Providentia_Super_Admin members
providentia_resource_login: User

# The suffix of the group name, which allows full administrator access to Providentiua eg. Providentia_Super_Admin
providentia_resource_superadmin: Super_Admin
