---
- name: Making sure that {{ post_scripts_folder_on_target }} folder exists...
  ansible.windows.win_file:
    path: "{{ post_scripts_folder_on_target }}"
    state: directory

# Not using community.windows.win_power_plan because it doesn't work on older Windows versions
- name: Configuring Windows power settings...
  ansible.windows.win_shell: |
    powercfg -change -monitor-timeout-ac 0
    powercfg -change -standby-timeout-ac 0
    powercfg -change -disk-timeout-ac 0
    powercfg -change -hibernate-timeout-ac 0
    powercfg -change -monitor-timeout-dc 0
    powercfg -change -standby-timeout-dc 0
    powercfg -change -disk-timeout-dc 0
    powercfg -change -hibernate-timeout-dc 0

- name: Disabling reserved storage... # This blocks sysprep
  ansible.windows.win_shell: Set-WindowsReservedStorageState -State Disabled
  register: reserved_storage
  when: ansible_facts['distribution_version'] is version('10.0.19041.0', '>=') # Windows 10 2004 and later...
  until: reserved_storage.rc == 0
  retries: 12
  delay: 10

- name: Enabling TLS 1.2...
  ansible.windows.win_regedit:
    path: HKLM:\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\v4.0.30319
    name: SchUseStrongCrypto
    data: 1
    type: dword
  when: ansible_facts['distribution_version'] is version('10.0.14393.0', '<=') # Windows Server 2016, 8,1 and lower

- name: Setting the following Windows registry values for all Windows machines...
  ansible.windows.win_regedit:
    path: "{{ item.path }}"
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    type: "{{ item.type }}"
  loop:
    - path: HKLM:\SYSTEM\CurrentControlSet\Services\WinRM
      name: DelayedAutoStart
      data: 0
      type: dword
    - path: HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
      name: ArpRetryCount
      data: 0
      type: dword
    - path: HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\DNSClient
      name: RegisterReverseLookup
      data: 1
      type: dword
    - path: HKLM:\SOFTWARE\Policies\Microsoft\Internet Explorer\Main
      name: DisableFirstRunCustomize
      data: 2
      type: dword
    - path: HKLM:\Software\Microsoft\Windows\CurrentVersion\Explorer # Enables Always show all icons and notifications on the taskbar
      name: EnableAutoTray
      data: 0
      type: dword

- name: Setting the following Windows Server registry values...
  ansible.windows.win_regedit:
    path: "{{ item.path }}"
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    type: "{{ item.type }}"
  loop:
    - path: HKLM:\SOFTWARE\Policies\Microsoft\Windows\Server\ServerManager # Disables Server Manager autostart
      name: DoNotOpenAtLogon
      data: 1
      type: dword
    - path: HKLM:\SOFTWARE\Policies\Microsoft\Edge # Disables Edge first run screen
      name: HideFirstRunExperience
      data: 1
      type: dword
  when:
    - ansible_facts.os_product_type == 'server' or ansible_facts.os_product_type == 'domain_controller'
    - ansible_facts.os_installation_type != 'Server Core'

- name: Setting the following Windows Server Core registry values...
  ansible.windows.win_regedit:
    path: "{{ item.path }}"
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    type: "{{ item.type }}"
  loop:
    - path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon # Sets PowerShell as default shell for Server CORE
      name: Shell
      data: PowerShell.exe -NoExit
      type: string
  when: ansible_facts.os_installation_type == 'Server Core'

- name: Setting the following Windows Workstation registry values...
  ansible.windows.win_regedit:
    path: "{{ item.path }}"
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    type: "{{ item.type }}"
  loop:
    - path: HKLM:\SOFTWARE\Policies\Microsoft\Windows\DeliveryOptimization # Disables Windows updata dwonload from local network
      name: DODownloadMode
      data: 0
      type: dword
    - path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System # Disables first logon animations
      name: EnableFirstLogonAnimation
      data: 0
      type: dword
    - path: HKLM:\SOFTWARE\Policies\Microsoft\Edge # Disables Edge first run screen
      name: HideFirstRunExperience
      data: 1
      type: dword
  when: ansible_facts.os_product_type == "workstation"

- name: Installing and configuring Chocolatey...
  when: template_os_configuration_install_chocolatey
  block:
    - name: Enabling & starting Windows Update service...
      ansible.windows.win_service:
        name: wuauserv
        start_mode: auto
        state: started
      register: wuauserv_service
      until: not wuauserv_service.failed
      retries: 3
      delay: 10

    - name: Enabling & starting Update Orchestrator Service...
      ansible.windows.win_service:
        name: UsoSvc
        start_mode: auto
        state: started
      register: usosvc_service
      until: not usosvc_service.failed
      retries: 3
      delay: 10
      when: ansible_facts['distribution_version'] is version('6.3.9600.0', '>') # Greater than Windows 8.1 & Server 2012 R2

    - name: Installing older Windows prerequisites...
      when: ansible_facts['distribution_version'] is version('10.0.17763.0', '<=') # Windows Server 2019 and lower
      block:
        - name: Installing .Net 4.8...
          ansible.windows.win_package:
            path: https://go.microsoft.com/fwlink/?linkid=2088631
            arguments: /q /norestart
          register: dotnet_install

        - name: Rebooting..
          ansible.windows.win_reboot:
          when: dotnet_install.reboot_required

    - name: Installing Chocolatey...
      ansible.windows.win_shell: Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

    - name: Configuring Chocolatey features...
      chocolatey.chocolatey.win_chocolatey_feature:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
      loop:
        - name: checksumFiles
          state: enabled
        - name: allowGlobalConfirmation
          state: enabled

    - name: Installing PowerShell 5.1 for older Windows OS...
      when: ansible_facts['distribution_version'] is version('6.3.9600.0', '<=') # Windows 8.1 & Server 2012 R2 and lower
      block:
        - name: Installing Powershell 5.1...
          ansible.windows.win_get_url:
            url: https://download.microsoft.com/download/6/F/5/6F5FF66C-6775-42B0-86C4-47D41F2DA187/Win8.1AndW2K12R2-KB3191564-x64.msu
            dest: "{{ post_scripts_folder_on_target }}/powershell.msu"
            force: false
            url_timeout: 120

        # Using this method to get past the interactive session required for wusa.exe
        - name: Installing Powershell 5.1...
          ansible.windows.win_shell: |
            $ErrorActionPreference = "Stop"
            if (5 -eq ($PSVersionTable.PSVersion.Major)) {Write-Host "NOREBOOT" ; exit 0 }
            $Password = "{{ ansible_password }}"
            $Username = "{{ ansible_user }}"
            $SecurePassword = ConvertTo-SecureString $Password -AsPlainText -Force
            $Credentials = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Username, $SecurePassword
            Start-Process wusa.exe -ArgumentList "/update c:\tmp/powershell.msu /quiet /norestart" -Wait -Credential $Credentials
          register: powershell_install

        - name: Rebooting..
          ansible.windows.win_reboot:
          when:
            - powershell_install.stdout_lines[0] is defined
            - powershell_install.stdout_lines[0] != "NOREBOOT"

# This must be after Powershell 5.1 installation
- name: Enabling TLS 1.2 for PowerShell and installing modules...
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Install-PackageProvider -Name NuGet -Force -Confirm:$false
    Install-Module PowerShellGet -Force -Confirm:$false
  register: ps_modules
  until: ps_modules.rc == 0
  retries: 12
  delay: 5

- name: Including RDP role... # Default is to enable RDP
  ansible.builtin.include_role:
    name: nova.core.win_configure_rdp

- name: Enabling following firewall groups...
  community.windows.win_firewall_rule:
    group: "{{ item }}"
    enabled: true
  loop:
    - "@FirewallAPI.dll,-28502" # File and Printer Sharing
    - "@FirewallAPI.dll,-32752" # Network Discovery

- name: Removing any existing autologins...
  community.windows.win_auto_logon:
    state: absent
