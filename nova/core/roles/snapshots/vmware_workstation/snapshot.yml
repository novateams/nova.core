---
- name: Getting the time...
  ansible.builtin.setup:
    filter: "*_time"

- name: Listing running VMs...
  ansible.builtin.command: vmrun -T ws list
  changed_when: true
  register: running_vms

- name: Stopping {{ inventory_hostname }}...
  ansible.builtin.command: vmrun -T ws stop {{ snapshots_local_vmx_path }} soft
  changed_when: true
  when: snapshots_local_vmx_path in running_vms.stdout_lines

- name: Closing VMware Workstation GUI for Wayland...
  when: lookup('env', 'XDG_SESSION_TYPE') == "wayland"
  block:
    - name: Stopping VMware Workstation GUI...
      ansible.builtin.shell: |
        set -o pipefail
        if [ -z "$(ps -fC vmware --no-headers)" ]; then
            echo "VMware not running..."
        else
            echo "Stopping VMware..."
            kill $(ps -fC vmware --no-headers | awk '{print $2}')
        fi
      args:
        executable: /bin/bash
      changed_when: vmware_workstation_running.stdout == "Stopping VMware..."
      register: vmware_workstation_running

    # Otherwise the file is locked and we can't start the VM
    - name: Waiting for user to run VMware Workstation GUI in background...
      ansible.builtin.shell: |
        if [ -z "$(ps -fC vmware --no-headers)" ]; then
            echo "Moving on..."
        else
            echo "Waiting for VMware to stop..."
        fi
      changed_when: false
      register: vmware_workstation_running
      retries: 60
      delay: 5
      until: vmware_workstation_running.stdout == "Moving on..."

# [1] because the first item in the list is title
- name: Removing all existing snapshots...
  ansible.builtin.command: vmrun -T ws deleteSnapshot {{ snapshots_local_vmx_path }} {{ all_snapshots.stdout_lines[1] }} andDeleteChildren
  changed_when: true
  when: snapshot_mode == 're-snap'

- name: Creating a snapshot...
  ansible.builtin.command: vmrun -T ws snapshot {{ snapshots_local_vmx_path }} {{ snapshot_name | default(ansible_date_time.iso8601) }}
  changed_when: true

- name: Starting {{ inventory_hostname }}...
  ansible.builtin.shell: DISPLAY={{ lookup('env', 'DISPLAY') }} vmrun -T ws start {{ snapshots_local_vmx_path }}
  changed_when: true
  when: lookup('env', 'XDG_SESSION_TYPE') != "wayland"

- name: Starting {{ inventory_hostname }}...
  ansible.builtin.command: vmrun -T ws start {{ machine_operations_local_vmx_path }} nogui
  changed_when: true
  when: lookup('env', 'XDG_SESSION_TYPE') == "wayland"
