---
# All of the vmware.vmware_rest have retries for stability
- name: Looking up the VM...
  vmware.vmware_rest.vcenter_vm_info:
    filter_names: "{{ custom_vm_name | default(vm_name) }}"
  register: vcenter_vm_info
  until: not vcenter_vm_info.failed
  retries: 5
  delay: 2
  delegate_to: localhost
  become: false

- name: Setting fresh_deploy fact...
  ansible.builtin.set_fact:
    fresh_deploy: true
  when: vcenter_vm_info.value == []

- name: Checking for the correct deploy mode...
  ansible.builtin.fail:
    msg: Machine doesn't exist, use deploy or redeploy first!
  when:
    - fresh_deploy
    - role_only or role_only_wp or single_role is defined

- name: Running VM creation tasks...
  delegate_to: localhost
  become: false
  when:
    - fresh_deploy
    - not manual_fresh_deploy # Since this block can only be ran once during clone
  block:
    - name: Checking for Network...
      ansible.builtin.fail:
        msg: |
          Missing networking configuration for {{ inventory_hostname }}!!!
          Check that you have the following configuration set:
            * {{ inventory_hostname }} machine has at least network interface defined
            * {{ inventory_hostname }} machine interface has the connection flag set to true
      when: primary_network == []

    - name: Checking that nothing is responding on {{ connection_address }}...
      local_action: shell ping -q -c 2 -W 2 {{ connection_address }}
      register: res
      failed_when: not (('0 received' in res.stdout) or ('0 packets received' in res.stdout))
      changed_when: false
      when: not connection_mode_dhcp

    - name: Missing Operating System...
      ansible.builtin.fail:
        msg: Cannot find vm_template or base_vm_template variable! Did define the Operating System in the inventory?
      when:
        - vm_template is not defined
        - base_vm_template is not defined

    - name: Looking up the VM template...
      vmware.vmware_rest.vcenter_vm_info:
        filter_names: "{{ vm_template if not template else base_vm_template }}"
      register: template_search_result
      until: not template_search_result.failed
      retries: 5
      delay: 2

    - name: Missing VM template...
      ansible.builtin.fail:
        msg: Cannot find template - {{ vm_template if not template else base_vm_template }}
      when: template_search_result.value == []

    - name: Getting information about the VM template...
      vmware.vmware_rest.vcenter_vm_info:
        vm: "{{ template_search_result.value[0].vm }}"
      register: vm_template_information
      until: not vm_template_information.failed
      retries: 5
      delay: 2

    - name: Getting template OS disk size...
      ansible.builtin.set_fact:
        template_disk_size: "{{ vm_template_information.value.disks[(vm_template_information.value.disks | first)].capacity // (1024 * 1024) | int }}"

    # This task can be removed when local inventories are moved to Providentia
    - name: Setting OS disk size...
      ansible.builtin.set_fact:
        os_disk_size: "{{ os_disk_size_gb * 1024 }}"
      when:
        - os_disk_size_gb is defined
        - hardware_primary_disk_size is not defined

    - name: Setting OS disk size...
      ansible.builtin.set_fact:
        os_disk_size: "{{ hardware_primary_disk_size * 1024 }}"
      when: hardware_primary_disk_size is defined

    - name: Setting OS disk size...
      ansible.builtin.set_fact:
        os_disk_size: "{{ template_disk_size }}"
      when:
        - os_disk_size_gb is not defined
        - hardware_primary_disk_size is not defined

    - name: ERROR...
      ansible.builtin.debug:
        msg: Your OS disk size {{ os_disk_size }}MB cannot be smaller than the template {{ template_disk_size }}MB!
      when: template_disk_size | int > os_disk_size | int
      failed_when: template_disk_size | int > os_disk_size | int

    - name: Checking if linked clone is possible...
      when:
        - linked_clone_status
        - template_disk_size | int < os_disk_size | int
      block:
        - name: Info...
          ansible.builtin.debug:
            msg: |
              Your OS disk size {{ os_disk_size }}MB is bigger than the template {{ template_disk_size }}MB.
              Disabling linked clone.

        - name: Disabling linked clone...
          ansible.builtin.set_fact:
            linked_clone_status: false

    - name: Getting the time...
      ansible.builtin.setup:
        filter: "*_time"

    - name: Cloning {{ custom_vm_name | default(vm_name) }} VM...
      community.vmware.vmware_guest:
        datacenter: "{{ datacenter }}"
        name: "{{ custom_vm_name | default(vm_name) }}"
        template: "{{ base_vm_template if template else vm_template }}"
        folder: "{{ folder }}"
        state: "{{ 'poweredoff' if fresh_deploy else 'present' }}"
        esxi_hostname: "{{ omit if not machine_operations_esxi_hostname else machine_operations_esxi_hostname }}"
        cluster: "{{ omit if machine_operations_esxi_hostname else cluster }}"
        datastore: "{{ datastore }}"
        resource_pool: "{{ resource_pool | default(omit) }}"
        hardware:
          num_cpus: "{{ omit if not hardware_cpu else hardware_cpu }}"
          num_cpu_cores_per_socket: "{{ omit if not hardware_cpu else hardware_cpu }}"
          memory_mb: "{{ omit if not hardware_ram else (hardware_ram | int * 1024) | round(0) | int }}"
          memory_reservation_lock: false
          mem_reservation: 0
        cdrom: "{{ machine_operations_vsphere_cdrom_config }}"
        disk:
          - size_mb: "{{ os_disk_size }}"
            controller_type: "{{ vmware_scsi_controller_type }}"
            controller_number: 0
            unit_number: 0
        advanced_settings:
          - key: isolation.tools.copy.disable
            value: "FALSE"
          - key: isolation.tools.paste.disable
            value: "FALSE"
          - key: isolation.tools.setGUIOptions.enable
            value: "TRUE"
        linked_clone: "{{ linked_clone_status }}"
        snapshot_src: "{{ linked_clone_snapshot_name if linked_clone_status else omit }}"
        annotation: "{{ template_description if template else vm_description }}"
        vapp_properties: "{{ vapp_options }}"

    - name: Increasing video memory
      community.vmware.vmware_guest_video:
        name: "{{ custom_vm_name | default(vm_name) }}"
        folder: "{{ folder }}"
        datacenter: "{{ datacenter }}"
        video_memory_mb: "{{ video_memory }}"
        enable_3D: "{{ video_3d }}"
        memory_3D_mb: "{{ video_3d_memory if video_3d else omit }}"
        renderer_3D: "{{ 'automatic' if video_3d else omit }}"
        use_auto_detect: false
      when: video_increase_memory

    - name: Add vGPU profile to VM...
      community.vmware.vmware_guest_vgpu:
        cluster: "{{ cluster }}"
        datacenter: "{{ datacenter }}"
        name: "{{ custom_vm_name | default(vm_name) }}"
        vgpu: "{{ machine_operations_vgpu }}"
      when: machine_operations_vgpu

    - name: Looking up the cloned VM...
      vmware.vmware_rest.vcenter_vm_info:
        filter_names: "{{ custom_vm_name | default(vm_name) }}"
      register: created_vm_info
      until: not created_vm_info.failed
      retries: 5
      delay: 2

    - name: Getting {{ custom_vm_name | default(vm_name) }} interfaces...
      vmware.vmware_rest.vcenter_vm_hardware_ethernet_info:
        vm: "{{ created_vm_info.value[0].vm }}"
      register: existing_nic
      until: not existing_nic.failed
      retries: 5
      delay: 2

    - name: Getting the {{ default_interface[0].name }} network info...
      vmware.vmware_rest.vcenter_network_info:
        filter_names: "{{ default_interface[0].name }}"
      register: default_network
      until: not default_network.failed
      retries: 5
      delay: 2

    - name: ERROR...
      ansible.builtin.fail:
        msg: |
          Cannot find network - {{ default_interface[0].name }}
          The network does not exist or you do not have permissions to access it.
      when: default_network.value == []

    - name: Attaching the {{ default_interface[0].name }} interface...
      vmware.vmware_rest.vcenter_vm_hardware_ethernet:
        vm: "{{ created_vm_info.value[0].vm }}"
        type: "{{ default_interface[0].device_type | upper }}"
        nic: "{{ existing_nic.value[0].nic }}"
        backing:
          type: "{{ default_network.value[0].type }}"
          network: "{{ default_network.value[0].network }}"
        start_connected: true
        state: present
      register: add_default_nic
      until: not add_default_nic.failed
      retries: 5
      delay: 2

    - name: Configuring extra interfaces..
      when: extra_network_interfaces != []
      block:
        - name: Getting info for the following interfaces...
          vmware.vmware_rest.vcenter_network_info:
            filter_names: "{{ item }}"
          register: extra_interfaces
          loop: "{{ extra_network_interfaces | map(attribute='name') }}"
          until: not extra_interfaces.failed
          retries: 5
          delay: 2

        - name: Adding the following network interfaces to {{ inventory_hostname }}...
          vmware.vmware_rest.vcenter_vm_hardware_ethernet:
            vm: "{{ created_vm_info.value[0].vm }}"
            type: "{{ extra_network_interfaces[loop_index].device_type | upper | default('VMXNET3') }}"
            backing:
              type: "{{ item.value[0].type }}"
              network: "{{ item.value[0].network }}"
            start_connected: true
          loop: "{{ extra_interfaces.results }}"
          loop_control:
            index_var: loop_index
            label: "{{ item.value[0].name | default(omit) }}" # Omit is required to avoid error when this block is skipped

- name: Starting VM & Connecting the {{ default_interface[0].name }} interface...
  delegate_to: localhost
  become: false
  when:
    - fresh_deploy or vcenter_vm_info.value[0].power_state != "POWERED_ON"
    - not just_create
  block:
    - name: Starting VM...
      community.vmware.vmware_guest_powerstate:
        state: powered-on
        name: "{{ custom_vm_name | default(vm_name) }}"
        folder: "{{ folder }}"

    # Connect is required when cloning to a cluster that does not have the template network available
    - name: Connecting the {{ default_interface[0].name }} interface...
      vmware.vmware_rest.vcenter_vm_hardware_ethernet:
        vm: "{{ created_vm_info.value[0].vm }}"
        nic: "{{ existing_nic.value[0].nic }}"
        state: connect
      register: connect_default_nic
      until: not connect_default_nic.failed
      retries: 5
      delay: 2
      when:
        - fresh_deploy
        - not manual_fresh_deploy # Since this block can only be ran once during clone
