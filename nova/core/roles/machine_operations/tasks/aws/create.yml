---
- name: Creating AWS EC2 instance for {{ inventory_hostname }}...
  delegate_to: localhost
  become: false
  block:
    - name: Sorting instances by launch_time...
      ansible.builtin.set_fact:
        existing_instances: "{{ ec2_instance_info.instances | sort(attribute='launch_time') }}"

    - name: Setting fresh_deploy as fact...
      ansible.builtin.set_fact:
        fresh_deploy: true
      when: existing_instances == [] or existing_instances[-1].state.name == 'terminated'

    - name: Including fresh deploy tasks...
      when: fresh_deploy
      block:
        # Removal is required if for some reason the temp key already exists
        - name: Removing existing ssh temp key for {{ custom_vm_name | default(vm_name) }}...
          amazon.aws.ec2_key:
            name: "{{ custom_vm_name | default(vm_name) }}"
            state: absent

        - name: Creating a temp ssh key for {{ custom_vm_name | default(vm_name) }}...
          amazon.aws.ec2_key:
            name: "{{ custom_vm_name | default(vm_name) }}"
            key_type: ed25519
            file_name: "{{ temp_ssh_key_path }}"

    - name: Configuring AWS EC2 instance for {{ inventory_hostname }}...
      when:
        - not role_only_wp # Not reconfiguring when running from pre_vm_role
        - not role_only # Not reconfiguring on role only
      block:
        - name: Getting all OS images...
          amazon.aws.ec2_ami_info:
            filters:
              owner-id: "{{ ami_owner_id }}"
              name: "{{ ami_name_search_string }}"
              architecture: x86_64
          register: found_amis

        - name: Sorting images by creation_date...
          ansible.builtin.set_fact:
            all_images: "{{ found_amis.images | sort(attribute='creation_date') }}"

        - name: Configuring AWS security group for {{ custom_vm_name | default(vm_name) }}...
          amazon.aws.ec2_security_group:
            name: "{{ custom_vm_name | default(vm_name) }}"
            description: Security group for {{ custom_vm_name | default(vm_name) }}
            rules: "{{ machine_operations_aws_security_group_rules }}"
            state: present
          when: machine_operations_create_aws_security_group

        - name: Launching {{ hostname }} EC2 instance...
          amazon.aws.ec2_instance:
            name: "{{ custom_vm_name | default(vm_name) }}"
            key_name: "{{ custom_vm_name | default(vm_name) }}"
            vpc_subnet_id: "{{ ec2_subnet_id | default(omit) }}"
            instance_type: "{{ aws_vm_size | default('t3.micro') }}"
            security_group: "{{ machine_operations_aws_security_group | default(custom_vm_name) | default(vm_name) }}"
            image_id: "{{ all_images[-1].image_id }}"
            tags:
              inventory_hostname: "{{ inventory_hostname }}"
              project_fullname: "{{ project_fullname | default('undefined_project') }}"
          register: created_ec2_instance
          until: created_ec2_instance.instances[0].public_ip_address is defined
          retries: 10
          delay: 3

        # If for some reason it was present from previous deploy
        - name: Removing existing ssh temp key for {{ custom_vm_name | default(vm_name) }}...
          amazon.aws.ec2_key:
            name: "{{ custom_vm_name | default(vm_name) }}"
            state: absent

- name: Setting connection_address...
  ansible.builtin.set_fact:
    connection_address: "{{ created_ec2_instance.instances[0].public_ip_address | default(existing_instances[-1].public_ip_address) }}"
