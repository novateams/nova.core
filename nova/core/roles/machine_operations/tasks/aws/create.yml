---
- name: Creating AWS EC2 instance for {{ inventory_hostname }}...
  delegate_to: localhost
  become: false
  block:
    - name: Sorting instances by launch_time...
      ansible.builtin.set_fact:
        existing_instances: "{{ ec2_instance_info.instances | sort(attribute='launch_time') }}"

    - name: Setting fresh_deploy as fact...
      ansible.builtin.set_fact:
        fresh_deploy: true
      when: existing_instances == [] or existing_instances[-1].state.name == 'terminated'

    - name: Checking for the correct deploy mode...
      ansible.builtin.fail:
        msg: |
          Virtual Machine {{ custom_vm_name | default(vm_name) }} doesn't exist, use the deploy command first!
      when:
        - fresh_deploy
        - role_only or role_only_wp or single_role is defined

    - name: Including fresh deploy tasks...
      when: fresh_deploy
      block:
        # Removal is required if for some reason the temp key already exists
        - name: Removing existing ssh temp key for {{ custom_vm_name | default(vm_name) }}...
          amazon.aws.ec2_key:
            name: "{{ custom_vm_name | default(vm_name) }}"
            state: absent

        - name: Creating a temp ssh key for {{ custom_vm_name | default(vm_name) }}...
          amazon.aws.ec2_key:
            name: "{{ custom_vm_name | default(vm_name) }}"
            key_type: rsa
            file_name: "{{ machine_operations_aws_temp_ssh_key_path }}"

        - name: Generating {{ aws_template_username | default(template_username) }} user account password...
          ansible.builtin.set_fact:
            template_password: "{{ lookup('password', '/dev/null length=32 chars=hexdigits') }}"
          when: ("os_windows" in group_names)

    - name: Configuring AWS EC2 instance for {{ inventory_hostname }}...
      when:
        - not role_only_wp # Not reconfiguring when running from pre_vm_role
        - not role_only # Not reconfiguring on role only
      block:
        - name: Getting all OS images...
          amazon.aws.ec2_ami_info:
            filters:
              owner-id: "{{ ami_owner_id }}"
              name: "{{ ami_name_search_string }}"
              architecture: x86_64
          register: found_amis

        - name: Sorting images by creation_date...
          ansible.builtin.set_fact:
            all_images: "{{ found_amis.images | sort(attribute='creation_date') }}"

        - name: Configuring AWS security group for {{ custom_vm_name | default(vm_name) }}...
          amazon.aws.ec2_security_group:
            name: "{{ custom_vm_name | default(vm_name) }}"
            description: Security group for {{ custom_vm_name | default(vm_name) }}
            rules: "{{ machine_operations_aws_security_group_rules }}"
            state: present
            vpc_id: "{{ aws_vpc_id | default(omit) }}"
          register: created_security_group
          when: machine_operations_create_aws_security_group

        - name: Launching {{ hostname }} EC2 instance...
          amazon.aws.ec2_instance:
            name: "{{ custom_vm_name | default(vm_name) }}"
            key_name: "{{ custom_vm_name | default(vm_name) }}"
            network_interfaces: >-
              [
                {% if interfaces == [] %}
                {
                  "assign_public_ip": false
                }
                {% endif %}
                {% for iface in interfaces %}
                {
                  "subnet_id": "{{ iface.cloud_id }}",
                  "assign_public_ip": false,
                  "device_index": {{ loop.index0 }},
                  "ipv6_addresses": {{ iface.addresses | selectattr('mode', 'equalto', 'ipv6_static')
                    | map(attribute='address') | ansible.utils.ipaddr('address') }},
                  "private_ip_addresses": [
                    {% for ip in iface.addresses | selectattr('mode', 'equalto', 'ipv4_static')
                      | map(attribute='address') | ansible.utils.ipaddr('address') %}
                      {
                        "private_ip_address": "{{ ip }}",
                        "primary": {{ 'true' if loop.first else 'false' }}
                      }{% if not loop.last %},{% endif %}
                    {% endfor %}
                  ]
                }{% if not loop.last %},{% endif %}
                {% endfor %}
              ]
            instance_type: "{{ aws_vm_size | default('t3.micro') }}"
            security_group: "{{ aws_security_group_id | default(created_security_group.group_id) }}"
            image_id: "{{ all_images[-1].image_id }}"
            user_data: "{{ lookup('ansible.builtin.template', 'Configure-CloudWindows.ps1') if 'os_windows' in group_names and fresh_deploy else omit }}"
            tags:
              inventory_hostname: "{{ inventory_hostname }}"
              project_fullname: "{{ project_fullname | default('undefined_project') }}"
          register: created_ec2_instance
          when: fresh_deploy

        # If for some reason it was present from previous deploy
        - name: Removing existing ssh temp key for {{ custom_vm_name | default(vm_name) }}...
          amazon.aws.ec2_key:
            name: "{{ custom_vm_name | default(vm_name) }}"
            state: absent

    - name: Configuring public IP for {{ custom_vm_name | default(vm_name) }}...
      amazon.aws.ec2_eip:
        device_id:
          "{{ (created_ec2_instance.instances[0] | default(existing_instances[-1])).network_interfaces[(interfaces
          | map(attribute='connection') | list).index(True) if interfaces != [] else 0].network_interface_id }}"
        in_vpc: true
        release_on_disassociation: true
        state: present
        tags:
          inventory_hostname: "{{ inventory_hostname }}"
          project_fullname: "{{ project_fullname | default('undefined_project') }}"
      register: eip_info
      when: machine_operations_aws_assign_public_ip

- name: Setting connection address to {{ eip_info.public_ip
    | default(created_ec2_instance.instances[0].public_ip_address)
    | default(existing_instances[-1].public_ip_address) }}
  ansible.builtin.set_fact:
    connection_address: "{{ eip_info.public_ip
      | default(created_ec2_instance.instances[0].public_ip_address)
      | default(existing_instances[-1].public_ip_address) }}"
  when: machine_operations_aws_assign_public_ip

- name: Waiting until SSH is up for {{ custom_vm_name | default(vm_name) }} over {{ connection_address }}...
  ansible.builtin.wait_for:
    host: "{{ connection_address }}"
    port: 22
    state: started
    timeout: 300
  delegate_to: localhost
  become: false
