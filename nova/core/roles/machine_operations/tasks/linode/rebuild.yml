---
- name: NO UNDEPLOY OR IMMUTABLE SET
  ansible.builtin.fail:
    msg: "{{ inventory_hostname }} HAS no_undeploy or immutable SET AND WON'T BE REBUILT"
  when: immutable or no_undeploy or 'immutable' in group_names or 'no_undeploy' in group_names

- name: Getting {{ custom_vm_name | default(vm_name) }} info...
  linode.cloud.instance_info:
    api_token: "{{ linode_api_token }}"
    label: "{{ custom_vm_name | default(vm_name) }}"
  register: linode_vm
  delegate_to: localhost
  become: false

- name: Rebuilding {{ custom_vm_name | default(vm_name) }}...
  ansible.builtin.uri:
    url: https://api.linode.com/v4/linode/instances/{{ linode_vm.instance.id }}/rebuild
    method: POST
    headers:
      Content-Type: application/json
      Authorization: Bearer {{ linode_api_token }}
    body:
      image: "{{ linode_image }}"
      root_pass: "{{ machine_operations_linode_vm_password }}"
    body_format: json
  delegate_to: localhost
  become: false

# This is required because there's a delay after the POST request and actual rebuild
- name: Waiting until {{ custom_vm_name | default(vm_name) }} starts rebuilding...
  linode.cloud.instance_info:
    api_token: "{{ linode_api_token }}"
    label: "{{ custom_vm_name | default(vm_name) }}"
  register: linode_rebuild
  until: linode_rebuild.instance.status == "rebuilding"
  retries: 60
  delay: 1
  delegate_to: localhost
  become: false

- name: Waiting until {{ custom_vm_name | default(vm_name) }} rebuilding is complete...
  linode.cloud.instance_info:
    api_token: "{{ linode_api_token }}"
    label: "{{ custom_vm_name | default(vm_name) }}"
  register: linode_rebuild_state
  until: linode_rebuild_state.instance.status == "running"
  retries: 60
  delay: 1
  delegate_to: localhost
  become: false

- name: Setting fresh_deploy fact...
  ansible.builtin.set_fact:
    fresh_deploy: true
