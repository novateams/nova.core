---
- name: Including VMware Workstation tasks...
  become: false
  block:
    - name: Checking if the {{ custom_vm_name | default(vm_name) }} already exists...
      ansible.builtin.stat:
        path: "{{ machine_operations_local_vmx_path }}"
      register: vm_presence

    - name: INCORRECT DEPLOY METHOD
      ansible.builtin.fail:
        msg: "{{ custom_vm_name | default(vm_name) }} doesn't exist, run deploy or redeploy first!"
      when:
        - not vm_presence.stat.exists
        - role_only or role_only_wp

    - name: Creating {{ template_export_folder }} folder...
      ansible.builtin.file:
        path: "{{ template_export_folder }}"
        state: directory
        recurse: true

    - name: Creating and configuring {{ custom_vm_name | default(vm_name) }}...
      when: not vm_presence.stat.exists
      block:
        - name: Checking if {{ vm_template }} template is already downloaded...
          ansible.builtin.stat:
            path: "{{ local_vmx_template_path }}"
          register: vm_template_presence

        - name: Getting the time...
          ansible.builtin.setup:
            filter: "*_time"

        - name: Downloading or updating VM template...
          when:
            - not vm_template_presence.stat.exists or ((ansible_date_time.epoch | int) - (vm_template_presence.stat.ctime | round)
              >= machine_operations_vmware_workstation_template_update_interval)
            - not role_only
            - not role_only_wp
          block:
            - name: Removing existing {{ vm_template }} template...
              ansible.builtin.file:
                path: "{{ template_export_folder }}/{{ vm_template }}"
                state: absent
              when: machine_operations_vmware_workstation_template_update

            # regex_replace is required because urlib considers / as a safe character and doesn't encode it
            - name: Downloading {{ vm_template }} since it's not present or is older than the update interval...
              ansible.builtin.command:
                ovftool --noSSLVerify -tt=vmx -n={{ vm_template }} "vi://{{ vmware_defaults.username }}:{{ vmware_defaults.password | urlencode
                | regex_replace('/', '%2F') }}@{{ templates_path }}/{{ vm_template }}" {{ template_export_folder }}
              changed_when: true
              when: not vm_template_presence.stat.exists

        - name: Setting fresh_deploy fact...
          ansible.builtin.set_fact:
            fresh_deploy: true

        - name: Create VM folder if it does not exist
          ansible.builtin.file:
            path: "{{ local_vm_folder }}"
            state: directory
            recurse: true

        - name: Creating {{ custom_vm_name | default(vm_name) }} to vmxt template...
          ansible.builtin.command:
            vmcli {{ local_vmx_template_path }} vmtemplate create --path {{ local_vm_folder }}/{{ custom_vm_name | default(vm_name) }}/{{ custom_vm_name
            | default(vm_name) }}.vmtx --name {{ custom_vm_name | default(vm_name) }}
          changed_when: true

        - name: Deploying {{ custom_vm_name | default(vm_name) }} VM...
          ansible.builtin.command: vmcli vmtemplate deploy --path {{ local_vm_folder }}/{{ custom_vm_name
            | default(vm_name) }}/{{ custom_vm_name | default(vm_name) }}.vmtx
          changed_when: true

        - name: Configuring {{ custom_vm_name | default(vm_name) }} virtual machine...
          ansible.builtin.lineinfile:
            path: "{{ machine_operations_local_vmx_path }}"
            regex: "{{ item.regex }}"
            line: "{{ item.line }}"
            state: present
          loop_control:
            label: "{{ item.line }}"
          loop:
            # Sets the network adapter to NAT
            - regex: ethernet0.connectionType.*
              line: ethernet0.connectionType = "nat"

            # Otherwise Windows deploy will fail sometimes because of running sysprep
            - regex: tools.upgrade.policy.*
              line: tools.upgrade.policy = "manual"

            # This fixes Windows BSOD when importing from vSphere
            - regex: hpet0.present.*
              line: hpet0.present = "TRUE"

            # This fixes the issue where link keeps flapping https://github.com/mkubecek/vmware-host-modules/issues/54
            - regex: vmnat.linkStatePropagation.disable.*
              line: vmnat.linkStatePropagation.disable = "TRUE"

            # Enabling nested virtualization
            - regex: vhv.enable.*
              line: vhv.enable = "TRUE"

        - name: Setting compatible Darwin OS type...
          ansible.builtin.lineinfile:
            path: "{{ machine_operations_local_vmx_path }}"
            regex: "{{ item.regex }}"
            line: "{{ item.line }}"
            state: present
          loop_control:
            label: "{{ item.line }}"
          loop:
            - regex: guestos.*
              line: guestos = "darwin20-64"
          when:
            - ansible_system is defined
            - ansible_system == "Darwin"

        - name: Configuring {{ custom_vm_name | default(vm_name) }} custom parameters...
          ansible.builtin.lineinfile:
            path: "{{ machine_operations_local_vmx_path }}"
            regex: "{{ item.regex }}"
            line: "{{ item.line }}"
            state: present
          loop_control:
            label: "{{ item.line }}"
          loop: "{{ vmwarews_custom_params }}"
          when: vmwarews_custom_params != []

    - name: Including shared folder tasks...
      when:
        - enable_shared_folder
        - supported_shared_folder_os | intersect(group_names) | length > 0
        - not role_only
      block:
        - name: Sharing VM folder with host...
          ansible.builtin.lineinfile:
            path: "{{ machine_operations_local_vmx_path }}"
            regex: "{{ item.regex }}"
            line: "{{ item.line }}"
            state: present
          loop_control:
            label: "{{ item.line }}"
          loop:
            - regex: isolation.tools.hgfs.disable.*
              line: isolation.tools.hgfs.disable = "FALSE"
            - regex: sharedFolder0.present.*
              line: sharedFolder0.present = "TRUE"
            - regex: sharedFolder0.enabled.*
              line: sharedFolder0.enabled = "TRUE"
            - regex: sharedFolder0.readAccess.*
              line: sharedFolder0.readAccess = "TRUE"
            - regex: sharedFolder0.writeAccess.*
              line: sharedFolder0.writeAccess = "TRUE"
            - regex: sharedFolder0.hostPath.*
              line: sharedFolder0.hostPath = "{{ host_shared_folder_path }}"
            - regex: sharedFolder0.guestName.*
              line: sharedFolder0.guestName = "{{ custom_vm_name | default(vm_name) }}"
            - regex: sharedFolder0.expiration.*
              line: sharedFolder0.expiration = "never"
            - regex: sharedFolder.maxNum.*
              line: sharedFolder.maxNum = "1"

        - name: Creating a shared folder on the host...
          ansible.builtin.file:
            path: "{{ host_shared_folder_path }}"
            state: directory
            recurse: true

    - name: Starting {{ inventory_hostname }} and waiting for IP address... # noqa: command-instead-of-shell
      ansible.builtin.command: vmcli power start {{ machine_operations_local_vmx_path }}
      changed_when: true

    - name: Getting IP address for {{ inventory_hostname }}...
      ansible.builtin.command: vmrun getGuestIPAddress {{ machine_operations_local_vmx_path }} -wait
      changed_when: false
      register: vmip
      retries: 60
      delay: 3
      until:
        - vmip.rc == 0
        - vmip.stdout != "unknown"
        - vmip.stdout is ansible.utils.ipv4 # Waiting until IP address is a valid IPv4 address

    # Needs to be enabled here again because otherwise VMWare Workstation disables shared folders for new machines on first run
    - name: Enabling shared folders...
      ansible.builtin.command: vmrun enableSharedFolders {{ machine_operations_local_vmx_path }}
      changed_when: true
      when:
        - enable_shared_folder
        - supported_shared_folder_os | intersect(group_names) | length > 0

    - name: Setting {{ vmip.stdout }} for connection to {{ inventory_hostname }}...
      ansible.builtin.set_fact:
        ansible_host: "{{ vmip.stdout }}"
        primary_ipv4: "{{ vmip.stdout }}"
