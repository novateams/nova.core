---
- name: NO UNDEPLOY OR IMMUTABLE SET
  ansible.builtin.fail:
    msg: "{{ inventory_hostname }} HAS no_undeploy or immutable SET AND WON'T BE REMOVED"
  when: immutable or no_undeploy or 'immutable' in group_names or 'no_undeploy' in group_names

- name: Including VMware Workstation remove tasks...
  become: false
  block:
    - name: Checking if {{ inventory_hostname }} exists...
      ansible.builtin.stat:
        path: "{{ machine_operations_local_vmx_path }}"
      register: vm_exists

    - name: Removing {{ inventory_hostname }} if it exists...
      when: vm_exists.stat.exists
      block:
        - name: Listing running VMs...
          ansible.builtin.command: vmrun -T ws list
          changed_when: true
          register: running_vms

        - name: Stopping {{ inventory_hostname }}...
          ansible.builtin.command: vmrun -T ws stop {{ machine_operations_local_vmx_path }} hard
          changed_when: true
          when: machine_operations_local_vmx_path in running_vms.stdout_lines

        - name: Stopping VMware Workstation GUI...
          ansible.builtin.shell: |
            if [ -z "$(ps -fC vmware --no-headers)" ]; then
                echo "VMware not running..."
            else
                echo "Stopping VMware..."
                set -o pipefail
                kill $(ps -fC vmware --no-headers | awk '{print $2}')
            fi
          args:
            executable: /bin/bash
          changed_when: vmware_workstation_running.stdout == "Stopping VMware..."
          register: vmware_workstation_running

        # Otherwise the file is locked and we can't remove the VM
        - name: Waiting for user to run VMware Workstation GUI in background...
          ansible.builtin.shell: |
            if [ -z "$(ps -fC vmware --no-headers)" ]; then
                echo "Moving on..."
            else
                echo "Waiting for VMware to stop..."
            fi
          changed_when: false
          register: vmware_workstation_running
          retries: 60
          delay: 5
          until: vmware_workstation_running.stdout == "Moving on..."

        - name: Removing {{ inventory_hostname }}...
          ansible.builtin.command: vmrun -T ws deleteVM {{ machine_operations_local_vmx_path }}
          changed_when: true

        - name: Removing {{ inventory_hostname }} folder...
          ansible.builtin.file:
            path: "{{ local_vm_folder }}/{{ custom_vm_name | default(vm_name) }}"
            state: absent

    - name: Stopping play...
      ansible.builtin.meta: end_host
      when: deploy_mode == 'undeploy'
