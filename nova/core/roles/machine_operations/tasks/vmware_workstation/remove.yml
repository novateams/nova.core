---
- block:
    - name: Checking if {{ inventory_hostname }} exists...
      ansible.builtin.stat:
        path: "{{ local_vmx_path }}"
      register: vm_exists

    - block:
        - name: Listing running VMs...
          ansible.builtin.shell: vmrun -T ws list
          register: running_vms

        - name: Stopping {{ inventory_hostname }}...
          ansible.builtin.shell: vmrun -T ws stop {{ local_vmx_path }} hard
          when: local_vmx_path in running_vms.stdout_lines

        - name: Waiting for user to manually stop VMware Workstation... # Otherwise the remove command gets insufficient permissions error
          ansible.builtin.shell: |
            if [ -z "$(ps -fC vmware --no-headers)" ]; then
                echo "Moving on..."
            else
                echo "Waiting for VMware to stop..."
            fi
          register: vmware_workstation_running
          retries: 30
          delay: 5
          until: vmware_workstation_running.stdout == "Moving on..."

        - name: Removing {{ inventory_hostname }}...
          ansible.builtin.shell: vmrun -T ws deleteVM {{ local_vmx_path }}

        - name: Stopping play for remove...
          ansible.builtin.meta: end_host
          when: deploy_mode == 'undeploy'

      when: vm_exists.stat.exists

    - name: Removing {{ inventory_hostname }} folder...
      ansible.builtin.file:
        path: "{{ local_vm_folder }}/{{ custom_vm_name | default(vm_name) }}"
        state: absent

  when:
    - not no_undeploy
    - "'no_undeploy' not in group_names"
    - not immutable
    - "'immutable' not in group_names"
  vars:
    ansible_become: false # Using this because set fact will cause probles with later becomes

- name: Warning...
  ansible.builtin.debug:
    msg: "{{ inventory_hostname }} has no_undeploy or immutable set and won't be removed!"
  when: immutable or no_undeploy or 'immutable' in group_names or 'no_undeploy' in group_names

- name: Stopping play...
  ansible.builtin.meta: end_host
  when: deploy_mode == 'undeploy'
