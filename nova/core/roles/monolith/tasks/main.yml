---
- name: Including prerequisites tasks...
  ansible.builtin.include_tasks:
    file: prerequisites.yml

- name: Including Caddy role...
  ansible.builtin.include_role:
    name: nova.core.caddy
  vars:
    caddy_self_signed_certificate_subject_alt_name: # Will be used only of no pre-existing certificate is found
      - "DNS:{{ monolith_vault_fqdn }}"
      - "DNS:{{ monolith_keycloak_fqdn }}"
      - "DNS:{{ monolith_providentia_fqdn }}"
      - "DNS:{{ monolith_nexus_fqdn }}"
    caddy_servers:
      - caddy_server_name: "{{ monolith_vault_fqdn }}"
        caddy_server_certificate_path: /srv/certs/{{ fqdn }}_fullchain.crt
        caddy_server_certificate_key_path: /srv/certs/{{ fqdn }}_key.crt
        caddy_server_listen_addresses:
          - "{{ monolith_vault_fqdn }}"
        caddy_server_reverse_proxy_to_address: http://vault

      - caddy_server_name: "{{ monolith_keycloak_fqdn }}"
        caddy_server_certificate_path: /srv/certs/{{ fqdn }}_fullchain.crt
        caddy_server_certificate_key_path: /srv/certs/{{ fqdn }}_key.crt
        caddy_server_listen_addresses:
          - "{{ monolith_keycloak_fqdn }}"
        caddy_server_reverse_proxy_to_address: http://keycloak:8080

      - caddy_server_name: "{{ monolith_providentia_fqdn }}"
        caddy_server_certificate_path: /srv/certs/{{ fqdn }}_fullchain.crt
        caddy_server_certificate_key_path: /srv/certs/{{ fqdn }}_key.crt
        caddy_server_listen_addresses:
          - "{{ monolith_providentia_fqdn }}"
        caddy_server_reverse_proxy_to_address: http://providentia-web:3000

      - caddy_server_name: "{{ monolith_nexus_fqdn }}"
        caddy_server_certificate_path: /srv/certs/{{ fqdn }}_fullchain.crt
        caddy_server_certificate_key_path: /srv/certs/{{ fqdn }}_key.crt
        caddy_server_listen_addresses:
          - "{{ monolith_nexus_fqdn }}"
        caddy_server_reverse_proxy_to_address: http://nexus:8081
        caddy_server_request_body_size: 10000M

      - caddy_server_name: docker-proxy.{{ domain }}
        caddy_server_certificate_path: /srv/certs/{{ fqdn }}_fullchain.crt
        caddy_server_certificate_key_path: /srv/certs/{{ fqdn }}_key.crt
        caddy_server_listen_addresses:
          - docker-proxy.{{ domain }}
        caddy_server_reverse_proxy_rewrite: "* /repository/docker-proxy/{uri}"
        caddy_server_reverse_proxy_to_address: http://nexus:8081
        caddy_server_request_body_size: 10000M

- name: Downloading and trusting self-signed certificate...
  when: caddy_generate_self_signed_certificate | default(false)
  block:
    - name: Getting self-signed certificate contents...
      ansible.builtin.slurp:
        src: /srv/certs/{{ fqdn }}_fullchain.crt
      register: monolith_self_signed_certificate

    - name: Copying self-signed certificate to /usr/local/share/ca-certificates/{{ fqdn }}.crt...
      ansible.builtin.copy:
        content: "{{ monolith_self_signed_certificate.content | b64decode }}"
        dest: /usr/local/share/ca-certificates/{{ fqdn }}.crt
        mode: "0644"

    - name: Copying self-signed certificate to /usr/local/share/ca-certificates/{{ fqdn }}.crt...
      ansible.builtin.copy:
        content: "{{ monolith_self_signed_certificate.content | b64decode }}"
        dest: /usr/local/share/ca-certificates/{{ fqdn }}.crt
        mode: "0644"
      delegate_to: localhost
      become: true

    - name: Updating remote CA certificates...
      ansible.builtin.command: update-ca-certificates --fresh
      changed_when: true
      retries: 5
      delay: 2

    - name: Updating local CA certificates...
      ansible.builtin.command: update-ca-certificates --fresh
      changed_when: true
      delegate_to: localhost
      become: true
      retries: 5
      delay: 2

# This is so we don't need to include vault.yml if using monolith_single_service for only configuring single service
- name: Checking if Vault credentials already exist...
  ansible.builtin.stat:
    path: /srv/vault/creds/root_token
  register: vault_creds_state

- name: Getting Vault token...
  when: vault_creds_state.stat.exists
  block:
    - name: Getting Vault root token & unseal key...
      ansible.builtin.command: cat /srv/vault/creds/root_token
      register: vault_creds

    - name: Generating Hashicorp Vault token for {{ monolith_vault_fqdn }}...
      community.hashi_vault.vault_login:
        url: https://{{ monolith_vault_fqdn }}
        auth_method: token
        token: "{{ vault_creds.stdout }}"
        validate_certs: "{{ vault_validate_cert | default(true) }}"
      register: deploy_vars_vault_token

    - name: Setting vault_access_token fact...
      ansible.builtin.set_fact:
        vault_already_configured: true
        vault_access_token: "{{ deploy_vars_vault_token.login.auth.client_token }}"
        vault_lookup_fragment: "url=https://{{ monolith_vault_fqdn }} token={{ vault_access_token }} "

- name: Including following service configuration tasks...
  ansible.builtin.include_tasks:
    file: "{{ item }}.yml"
  loop:
    - vault
    - keycloak
    - providentia
    - nexus
  when: monolith_single_service is not defined

- name: Including following single service configuration tasks...
  ansible.builtin.include_tasks:
    file: "{{ monolith_single_service }}.yml"
  when: monolith_single_service is defined
