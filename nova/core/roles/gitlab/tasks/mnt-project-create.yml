---
- name: Look up existing projects info..
  ansible.builtin.uri:
    url: "{{ gitlab_url_api }}/projects"
    headers:
      Content-Type: application/json
      PRIVATE-TOKEN: "{{ gitlab_root_personal_token }}"
  register: gl_existing_projects

- name: Look ip existing GitLab groups..
  ansible.builtin.uri:
    url: "{{ gitlab_url_api }}/groups"
    method: GET
    headers:
      PRIVATE-TOKEN: "{{ gitlab_root_personal_token }}"
    return_content: true
    status_code: 200
  register: gl_existing_namespaces

- name: Set the current projects namespace ID variable..
  ansible.builtin.set_fact:
    gl_namespace_id: "{{ (gl_existing_namespaces.json | selectattr('name', 'equalto', project.namespace) | first).id }}"

## This is to be sure that the search is precise, project name is not unique
- name: Search for the project using namespace and project name..
  ansible.builtin.set_fact:
    gl_matched_projects:
      "{{ gl_existing_projects.json | selectattr('namespace.full_path', 'equalto', project.namespace)
      | selectattr('name', 'equalto', project.name) }}"

- name: Set current existing project ID variable..
  ansible.builtin.set_fact:
    gl_project_id: "{{ gl_matched_projects[0].id | default(None) }}"

- name: Removing the project..
  ansible.builtin.uri:
    url: "{{ gitlab_url_api }}/projects/{{ gl_project_id }}"
    method: DELETE
    headers:
      PRIVATE-TOKEN: "{{ gitlab_root_personal_token }}"
    status_code: [200, 202]
  when:
    - gl_project_id != ''

- name: Creating the project..
  ansible.builtin.uri:
    url: "{{ gitlab_url_api }}/projects"
    method: POST
    headers:
      Content-Type: application/json
      PRIVATE-TOKEN: "{{ gitlab_root_personal_token }}"
    body_format: json
    body:
      name: "{{ project.name }}"
      namespace_id: "{{ gl_namespace_id }}"
      description: "{{ project.description | default(project.name) }}"
      visibility: "{{ project.visibility | default('public') }}"
      initialize_with_readme: false
    status_code: [200, 201]
  when:
    - gl_project_id == ''

- name: Cleanup tmp for project files sync..
  ansible.builtin.file:
    path: /tmp/src_{{ project.namespace }}_{{ project.name }}
    state: absent
  delegate_to: localhost

- name: Cleanup tmp for project files sync..
  ansible.builtin.file:
    path: /tmp/upl_{{ project.namespace }}_{{ project.name }}
    state: absent
  delegate_to: localhost

- name: Synchronizing project files to /tmp/..
  ansible.posix.synchronize:
    src: "{{ project.source_path }}/"
    dest: /tmp/upl_{{ project.namespace }}_{{ project.name }}
    recursive: true
    rsync_opts:
      - --chown=root:root
    use_ssh_args: "yes"
  when:
    - project.source is defined
    - project.source_path is defined
    - project.source == "files"
  delegate_to: localhost

- name: Block - remote repo..
  when:
    - project.source is defined
    - project.source_url is defined
    - project.source == "repository"
  block:
    - name: Archive the repository to local dir..
      ansible.builtin.git:
        repo: "{{ project.source_url }}"
        dest: /tmp/src_{{ project.namespace }}_{{ project.name }}
        archive: /tmp/{{ project.name }}.tar
        version: "{{ project.source_version | default('HEAD') }}"
      delegate_to: localhost
      changed_when: false
      become: false

    - name: Create dir for untar..
      ansible.builtin.file:
        path: /tmp/upl_{{ project.namespace }}_{{ project.name }}
        state: directory
        mode: "0755"
      delegate_to: localhost

    - name: Untar the repository to a directory..
      ansible.builtin.unarchive:
        src: /tmp/{{ project.name }}.tar
        dest: /tmp/upl_{{ project.namespace }}_{{ project.name }}
      changed_when: false
      delegate_to: localhost

- name: Adding templateable files to the project..
  ansible.builtin.template:
    src: "{{ project.source_path }}/{{ item }}"
    dest: /tmp/upl_{{ project.namespace }}_{{ project.name }}/{{ item }}
    mode: "0600"
  with_items: "{{ project.files_to_template }}"
  when: project.files_to_template is defined
  delegate_to: localhost

- name: Commit project to target gitlab..
  ansible.builtin.shell: |
    token={{ gitlab_root_personal_token }}
    git config --global user.name "{{ gitlab_git_user_name }}"
    git config --global user.email "{{ gitlab_git_user_email }}"
    cd /tmp/upl_{{ project.namespace }}_{{ project.name }}
    git init --initial-branch=main
    git remote add origin https://gitlab-ci-token:${token}@{{ gitlab_fqdn }}/{{ project.namespace }}/{{ project.name }}.git
    git add .
    git commit -m "{{ project.commit_message | default('Initial commit') }}"
    git push --set-upstream origin main
    echo yo
  changed_when: false
  delegate_to: localhost
  when:
    - project.source is defined
