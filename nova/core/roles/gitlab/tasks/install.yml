---
- name: Creating Gitlab folders..
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: true
  loop:
    - "{{ gitlab_config_folder }}"
    - "{{ gitlab_config_folder }}/etc"
    - "{{ gitlab_config_folder }}/data"
    - "{{ gitlab_config_folder }}/logs"
    - "{{ gitlab_config_folder }}/registry"
    - "{{ gitlab_config_folder }}/temp_configuration"

- name: Templating Gitlab configuration files for {{ inventory_hostname }}..
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode | default('0644') }}"
    lstrip_blocks: true
  loop:
    - src: gitlab.yml
      dest: "{{ gitlab_config_folder }}/docker-compose.yml"
    - src: gitlab.rb
      dest: "{{ gitlab_config_folder }}/gitlab.rb"
    - src: increase-maxauthtries.sh
      dest: "{{ gitlab_config_folder }}/increase-maxauthtries.sh"
      mode: "0755"

- name: Composing Gitlab on {{ inventory_hostname }}...
  community.docker.docker_compose_v2:
    project_src: "{{ gitlab_config_folder }}"
    state: present
    wait: true
    wait_timeout: 600

- name: Configuring MaxAuthTries for GitLab ssh...
  when: gitlab_ssh_max_auth_tries != {}
  block:
    - name: Setting GitLab ssh MaxAuthTries to {{ gitlab_ssh_max_auth_tries }}..
      community.docker.docker_container_exec:
        container: gitlab
        command: /srv/increase-maxauthtries.sh
      register: increase_maxauthtries

    # Using stopped and present so the wait_timeout would apply
    - name: Stopping and starting GitLab to apply MaxAuthTries...
      when: increase_maxauthtries.stdout == "added"
      block:
        - name: Stopping GitLab on {{ inventory_hostname }}...
          community.docker.docker_compose_v2:
            project_src: "{{ gitlab_config_folder }}"
            state: stopped
            wait: true

        - name: Starting GitLab on {{ inventory_hostname }}...
          community.docker.docker_compose_v2:
            project_src: "{{ gitlab_config_folder }}"
            state: present
            wait: true
            wait_timeout: 600

- name: Finding and restarting proxy container..
  when: gitlab_proxy_container_name != {}
  block:
    - name: Checking if the proxy container exists..
      community.docker.docker_container_info:
        name: "{{ gitlab_proxy_container_name }}"
      register: proxy_container_check

    - name: Restarting {{ gitlab_proxy_container_name }}..
      community.docker.docker_container:
        name: "{{ gitlab_proxy_container_name }}"
        state: started
        restart: true
        container_default_behavior: no_defaults
      when: proxy_container_check.exists
