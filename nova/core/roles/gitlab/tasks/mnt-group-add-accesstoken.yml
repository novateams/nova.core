---
- name: Look up group id..
  ansible.builtin.uri:
    url: "{{ gitlab_url_api }}/groups?name={{ group.name }}&with_custom_attributes=true"
    headers:
      Content-Type: application/json
      PRIVATE-TOKEN: "{{ gitlab_root_personal_token }}"
  register: gitlab_group

- name: Get existing access_tokens in current group..
  ansible.builtin.uri:
    url: "{{ gitlab_url_api }}/groups/{{ gitlab_group.json[0].id }}/access_tokens"
    method: GET
    body_format: json
    headers:
      PRIVATE-TOKEN: "{{ gitlab_root_personal_token }}"
    status_code: [200, 201]
  register: existing_access_tokens

- name: Calculate the expires_at date for the token
  ansible.builtin.command: "date +'%Y-%m-%d' -d '+365 days'"
  changed_when: false
  register: date_result

- name: Create access tokens that are not set..
  ansible.builtin.uri:
    url: "{{ gitlab_url_api }}/groups/{{ (gitlab_group.json | selectattr('name', 'equalto', group.name))[0].id }}/access_tokens"
    method: POST
    body_format: json
    body:
      name: "{{ token.name }}"
      scopes: "{{ token.scopes | default(['read_repository']) }}"
      access_level: "{{ token.access_level | default('40') }}"
      expires_at: "{{ date_result.stdout }}"
    headers:
      Content-Type: application/json
      PRIVATE-TOKEN: "{{ gitlab_root_personal_token }}"
    status_code: [200, 201]
  loop: "{{ group.access_tokens }}"
  loop_control:
    loop_var: token
  when: token.name not in existing_access_tokens.json | map(attribute="name")
  register: gl_created_at

- name: Store the token value in vault..
  ansible.builtin.include_role:
    name: nova.core.secrets_to_vault
  when:
    - gl_created_at.results[0].status is defined
    - gl_created_at.results[0].status == 201
    - gl_created_at.results[0].json
    - gl_created_at.results[0].json.token
  vars:
    autogenerated_secret: true
    secrets:
      - key: "{{ inventory_hostname }}_gitlab_{{ group.name }}_at_{{ gl_created_at.results[0].json.name }}"
        value: "{{ gl_created_at.results[0].json.token }}"
