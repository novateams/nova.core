---
- name: Setting connection parameters for PanOS {{ inventory_hostname }}...
  ansible.builtin.set_fact:
    panos_connection_params:
      ip_address: "{{ connection_address }}"
      username: "{{ rest_api_credentials.user_name }}"
      password: "{{ rest_api_credentials.password }}"

- name: Configuring PanOS MGMT interface...
  delegate_to: localhost
  become: false
  block:
    - name: Configuring MGMT interface on fresh deploy...
      when: fresh_deploy
      block:
        # This is not an ideal solution but if trying to login to quickly, the PanOS will not accept the credentials or reset you back to login prompt
        - name: Sleeping for 2 minutes for PanOS to settle down...
          ansible.builtin.wait_for:
            timeout: 120

        - name: Typing username to {{ custom_vm_name | default(vm_name) }}...
          community.vmware.vmware_guest_sendkey:
            string_send: "{{ rest_api_credentials.user_name }}"
            name: "{{ custom_vm_name | default(vm_name) }}"

        - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
          community.vmware.vmware_guest_sendkey:
            name: "{{ custom_vm_name | default(vm_name) }}"
            sleep_time: 2
            keys_send:
              - ENTER

        - name: Typing password to {{ custom_vm_name | default(vm_name) }}...
          community.vmware.vmware_guest_sendkey:
            string_send: "{{ rest_api_credentials.password }}"
            name: "{{ custom_vm_name | default(vm_name) }}"

        - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
          community.vmware.vmware_guest_sendkey:
            name: "{{ custom_vm_name | default(vm_name) }}"
            sleep_time: 20
            keys_send:
              - ENTER

        - name: Entering configuration mode in {{ custom_vm_name | default(vm_name) }}...
          community.vmware.vmware_guest_sendkey:
            name: "{{ custom_vm_name | default(vm_name) }}"
            string_send: configure

        - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
          community.vmware.vmware_guest_sendkey:
            name: "{{ custom_vm_name | default(vm_name) }}"
            keys_send:
              - ENTER

        - name: Configuring static IP address for {{ custom_vm_name | default(vm_name) }}...
          when: connection_mode not in ['ipv4_dhcp', 'ipv6_dhcp', 'ipv6_slaac']
          block:
            - name: Setting static IP configuration for {{ custom_vm_name | default(vm_name) }}...
              community.vmware.vmware_guest_sendkey:
                name: "{{ custom_vm_name | default(vm_name) }}"
                string_send: set deviceconfig system type static

            - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
              community.vmware.vmware_guest_sendkey:
                name: "{{ custom_vm_name | default(vm_name) }}"
                keys_send:
                  - ENTER

            - name: Configuring MGMT IPv4...
              when:
                - interfaces | nova.core.addresses('connection_nic_ipv4') | first | ansible.utils.ipaddr('address') is ansible.utils.ipv4
                - interfaces | nova.core.addresses('mgmt_ipv4') | first | ansible.utils.ipaddr('address') is not ansible.utils.ipv4
              block:
                - name: Configuring MGMT interface IPv4 for {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    string_send:
                      set deviceconfig system ip-address {{ interfaces | nova.core.addresses('connection_nic_ipv4')
                      | first | ansible.utils.ipaddr('address') }} netmask {{ interfaces | nova.core.addresses('connection_nic_ipv4')
                      | first | ansible.utils.ipaddr('netmask') }} {{ ' ' if interfaces | nova.core.addresses('connection_nic_ipv4_gw')
                      | first == 'NA' else 'default-gateway ' + interfaces | nova.core.addresses('connection_nic_ipv4_gw') | first }}
                  when: interfaces | nova.core.addresses('connection_nic_ipv4') | first | ansible.utils.ipaddr('address') is ansible.utils.ipv4

                - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    keys_send:
                      - ENTER

            - name: Configuring OOB MGMT IPv4...
              when: interfaces | nova.core.addresses('mgmt_ipv4') | first | ansible.utils.ipaddr('address') is ansible.utils.ipv4
              block:
                - name: Configuring OOB MGMT interface IPv4 for {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    string_send: set deviceconfig system ip-address {{ interfaces | nova.core.addresses('mgmt_ipv4')
                      | first | ansible.utils.ipaddr('address') }} netmask {{ interfaces | nova.core.addresses('mgmt_ipv4')
                      | first | ansible.utils.ipaddr('netmask') }}
                  when: interfaces | nova.core.addresses('connection_nic_ipv4') | first | ansible.utils.ipaddr('address') is ansible.utils.ipv4

                - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    keys_send:
                      - ENTER

            - name: Configuring MGMT IPv6...
              when:
                - interfaces | nova.core.addresses('connection_nic_ipv6') | first | ansible.utils.ipaddr('address') is ansible.utils.ipv6
                - interfaces | nova.core.addresses('mgmt_ipv6') | first | ansible.utils.ipaddr('address') is not ansible.utils.ipv6
              block:
                - name: Configuring MGMT interface IPv6 for {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    string_send: set deviceconfig system ipv6-address {{ interfaces | nova.core.addresses('connection_nic_ipv6') | first }}

                - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    keys_send:
                      - ENTER

            - name: Configuring MGMT IPv6 GW...
              when:
                - interfaces | nova.core.addresses('connection_nic_ipv6_gw') | first is ansible.utils.ipv6
                - interfaces | nova.core.addresses('mgmt_ipv6') | first | ansible.utils.ipaddr('address') is not ansible.utils.ipv6
              block:
                - name: Configuring MGMT interface IPv6 gateway for {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    string_send: set deviceconfig system ipv6-default-gateway {{ connection_nic_ipv6_gw }}

                - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    keys_send:
                      - ENTER

            - name: Configuring OOB MGMT IPv6...
              when: interfaces | nova.core.addresses('mgmt_ipv6') | first | ansible.utils.ipaddr('address') is ansible.utils.ipv6
              block:
                - name: Configuring OOB MGMT interface IPv6 for {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    string_send: set deviceconfig system ipv6-address {{ interfaces | nova.core.addresses('mgmt_ipv6') | first }}

                - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    keys_send:
                      - ENTER

            - name: Committing changes for {{ custom_vm_name | default(vm_name) }}...
              community.vmware.vmware_guest_sendkey:
                name: "{{ custom_vm_name | default(vm_name) }}"
                string_send: commit

            - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
              community.vmware.vmware_guest_sendkey:
                name: "{{ custom_vm_name | default(vm_name) }}"
                keys_send:
                  - ENTER

        - name: Configuring dynamic IP address for {{ custom_vm_name | default(vm_name) }}...
          when: connection_mode in ['ipv4_dhcp', 'ipv6_dhcp', 'ipv6_slaac']
          block:
            - name: Configuring dynamic IPv4 address...
              when: connection_mode == "ipv4_dhcp"
              block:
                - name: Setting dynamic IP configuration for {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    string_send: set deviceconfig system type dhcp-client send-hostname yes

                - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    keys_send:
                      - ENTER

                - name: Setting dynamic IP configuration for {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    string_send: set deviceconfig system type dhcp-client send-client-id yes

                - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    keys_send:
                      - ENTER

                - name: Setting dynamic IP configuration for {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    string_send: set deviceconfig system type dhcp-client accept-dhcp-hostname yes

                - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    keys_send:
                      - ENTER

                - name: Setting dynamic IP configuration for {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    string_send: set deviceconfig system type dhcp-client accept-dhcp-domain yes

                - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    keys_send:
                      - ENTER

            - name: Configuring dynamic IPv6 address...
              when: connection_mode in ['ipv6_dhcp', 'ipv6_slaac']
              block:
                - name: Setting dynamic IPv6 configuration for {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    string_send: set deviceconfig system ipv6-type dynamic non-temporary-address yes

                - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
                  community.vmware.vmware_guest_sendkey:
                    name: "{{ custom_vm_name | default(vm_name) }}"
                    keys_send:
                      - ENTER

            - name: Committing changes for {{ custom_vm_name | default(vm_name) }}...
              community.vmware.vmware_guest_sendkey:
                name: "{{ custom_vm_name | default(vm_name) }}"
                string_send: commit

            - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
              community.vmware.vmware_guest_sendkey:
                name: "{{ custom_vm_name | default(vm_name) }}"
                keys_send:
                  - ENTER

            - name: Detecting DHCP address for {{ hostname }}...
              community.vmware.vmware_guest_info:
                datacenter: "{{ datacenter }}"
                name: "{{ custom_vm_name | default(vm_name) }}"
                folder: "{{ folder }}"
                properties:
                  - guest.ipAddress
                schema: vsphere
              delegate_to: localhost
              register: detect_dhcp
              until:
                - detect_dhcp.instance.guest.ipAddress != none
                - detect_dhcp.instance.guest.ipAddress != "0.0.0.0"
                - not (detect_dhcp.instance.guest.ipAddress | regex_search('169.254.*')) # Protection against APIPA address
                - not (detect_dhcp.instance.guest.ipAddress | ansible.utils.ipv6) # Protection against IPv6 link-local address
              retries: 60
              delay: 5

            - name: Re-setting connection parameters for PanOS {{ inventory_hostname }}...
              ansible.builtin.set_fact:
                panos_connection_params:
                  ip_address: "{{ detect_dhcp.instance.guest.ipAddress }}"
                  username: "{{ rest_api_credentials.user_name }}"
                  password: "{{ rest_api_credentials.password }}"

    - name: Waiting for {{ inventory_hostname }} to become reachable...
      paloaltonetworks.panos.panos_facts:
        provider: "{{ panos_connection_params }}"
      register: panos_facts
      until: panos_facts is succeeded
      retries: 20
      delay: 3

    - name: Removing any existing addresses from following interfaces(s)...
      paloaltonetworks.panos.panos_interface:
        provider: "{{ panos_connection_params }}"
        if_name: ethernet1/{{ idx + 1 }}
        mode: layer3
        state: absent
      loop: "{{ interfaces[1:] }}"
      loop_control:
        index_var: idx
        label: "{{ item.network_id }}"
      when: not fresh_deploy

    - name: Configuring IPv4 for following interfaces(s)...
      paloaltonetworks.panos.panos_interface:
        provider: "{{ panos_connection_params }}"
        if_name: ethernet1/{{ idx + 1 }}
        mode: layer3
        ip: "{{ item.addresses | selectattr('mode', 'equalto', 'ipv4_static') | map(attribute='address') | list }}"
        enable_dhcp: false
        ipv6_enabled: "{{ configure_networking_panos_enable_ipv6 }}"
      loop: "{{ interfaces[1:] }}"
      loop_control:
        index_var: idx
        label: "{{ item.network_id }}"
      when: item.addresses != []

    # Using templates task for IPv6 because paloaltonetworks.panos.panos_ipv6_address does not support list of addresses
    - name: Templating PanOS IPv6 adding tasks...
      ansible.builtin.template:
        src: panos.yml
        dest: /tmp/{{ project_fullname | default('') }}_{{ inventory_hostname }}_panos.yml
        mode: "0600"

    - name: Including PanOS IPv6 adding tasks...
      ansible.builtin.include_tasks:
        file: /tmp/{{ project_fullname | default('') }}_{{ inventory_hostname }}_panos.yml

    - name: Removing IPv6 adding tasks file...
      ansible.builtin.file:
        path: /tmp/{{ project_fullname | default('') }}_{{ inventory_hostname }}_panos.yml
        state: absent

    - name: Configuring PanOS DNS...
      paloaltonetworks.panos.panos_mgtconfig:
        provider: "{{ panos_connection_params }}"
        dns_server_primary: "{{ configure_networking_panos_primary_dns_server }}"
        dns_server_secondary: "{{ configure_networking_panos_secondary_dns_server }}"
      when: dns_servers != []

    - name: Configuring PanOS NTP...
      paloaltonetworks.panos.panos_mgtconfig:
        provider: "{{ panos_connection_params }}"
        ntp_server_primary: "{{ configure_networking_panos_primary_ntp_server }}"
        ntp_server_secondary: "{{ configure_networking_panos_secondary_ntp_server }}"
      when: ntp_servers != []

    - name: Committing PanOS changes...
      paloaltonetworks.panos.panos_commit_firewall:
        provider: "{{ panos_connection_params }}"
        force: true
      retries: 3

    - name: Exiting PanOS console...
      when: fresh_deploy
      block:
        - name: Exiting {{ custom_vm_name | default(vm_name) }} configuration mode...
          community.vmware.vmware_guest_sendkey:
            name: "{{ custom_vm_name | default(vm_name) }}"
            string_send: exit

        - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
          community.vmware.vmware_guest_sendkey:
            name: "{{ custom_vm_name | default(vm_name) }}"
            keys_send:
              - ENTER

        - name: Exiting {{ custom_vm_name | default(vm_name) }} console...
          community.vmware.vmware_guest_sendkey:
            name: "{{ custom_vm_name | default(vm_name) }}"
            string_send: exit

        - name: Sending ENTER to {{ custom_vm_name | default(vm_name) }}...
          community.vmware.vmware_guest_sendkey:
            name: "{{ custom_vm_name | default(vm_name) }}"
            keys_send:
              - ENTER
