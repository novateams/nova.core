---
- name: Configuring nmcli networking...
  become: false
  delegate_to: localhost
  block:
    # Check if root is mounted read-only
    # This an issue specific to Kali where sometimes root is mounted read-only
    # Done here because the check needs to happen in the very early stage of the boot
    - name: Checking if root is mounted read-only...
      ansible.builtin.uri:
        url: https://{{ vmware_defaults.hostname }}/api/vcenter/vm/{{ created_vm_info.value[0].vm
          | default(vcenter_vm_info.value[0].vm) }}/guest/processes?action=create
        method: POST
        headers:
          vmware-api-session-id: "{{ vcenter_session_api_key.json }}"
        body:
          credentials: "{{ rest_api_credentials }}"
          spec:
            arguments: -c 'if grep -q ID=kali /etc/os-release && mount | grep "on / " | grep ro,; then mount -o remount,rw /; fi'
            path: /bin/bash
        status_code: 201
        body_format: json
        validate_certs: "{{ validate_vmware_certs }}"
      retries: 3
      register: network_config_command

    - name: Including command run check task...
      ansible.builtin.include_tasks: command_run_check.yml

    - name: Templating nmcli configuration files...
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "0644"
        lstrip_blocks: true
      loop_control:
        label: "{{ item.src }}"
      loop:
        - src: 70-persistent-net.rules
          dest: /tmp/{{ project_fullname | default('') }}_{{ inventory_hostname }}_70-persistent-net.rules
        - src: nmcli.sh
          dest: /tmp/{{ project_fullname | default('') }}_{{ inventory_hostname }}_nmcli.sh

    - name: Getting configuration files' info...
      ansible.builtin.stat:
        path: "{{ item }}"
      register: file_size
      loop:
        - /tmp/{{ project_fullname | default('') }}_{{ inventory_hostname }}_70-persistent-net.rules
        - /tmp/{{ project_fullname | default('') }}_{{ inventory_hostname }}_nmcli.sh

    # Not running command_run_check.yml here because if that fails the next step will also fail and that is faster then running the check
    - name: Pre-Creating temp file...
      ansible.builtin.uri:
        url: https://{{ vmware_defaults.hostname }}/api/vcenter/vm/{{ created_vm_info.value[0].vm
          | default(vcenter_vm_info.value[0].vm) }}/guest/processes?action=create
        method: POST
        headers:
          vmware-api-session-id: "{{ vcenter_session_api_key.json }}"
        body:
          credentials: "{{ rest_api_credentials }}"
          spec:
            arguments: -c touch {{ item }}
            path: /bin/bash
        status_code: 201
        body_format: json
        validate_certs: "{{ vmware_defaults.validate_certs }}"
      retries: 3
      loop:
        - /etc/udev/rules.d/70-persistent-net.rules
        - /tmp/{{ project_fullname | default('') }}_{{ inventory_hostname }}_nmcli.sh

    - name: Preparing file upload...
      ansible.builtin.uri:
        url: https://{{ vmware_defaults.hostname }}/api/vcenter/vm/{{ created_vm_info.value[0].vm
          | default(vcenter_vm_info.value[0].vm) }}/guest/filesystem?action=create
        method: POST
        headers:
          vmware-api-session-id: "{{ vcenter_session_api_key.json }}"
        body:
          credentials: "{{ rest_api_credentials }}"
          spec:
            attributes:
              overwrite: true
              size: "{{ file_size.results[file_index].stat.size }}"
            path: "{{ item }}"
        status_code: 201
        body_format: json
        validate_certs: "{{ vmware_defaults.validate_certs }}"
      register: file_upload_prep
      retries: 3
      loop_control:
        index_var: file_index
      loop:
        - /etc/udev/rules.d/70-persistent-net.rules
        - /tmp/{{ project_fullname | default('') }}_{{ inventory_hostname }}_nmcli.sh

    - name: Uploading file...
      ansible.builtin.uri:
        url: "{{ file_upload_prep.results[file_upload_index].json }}"
        method: PUT
        headers:
          vmware-api-session-id: "{{ vcenter_session_api_key.json }}"
        src: "{{ item }}"
        status_code: 200
        body_format: json
        validate_certs: "{{ vmware_defaults.validate_certs }}"
      retries: 3
      loop_control:
        index_var: file_upload_index
      loop:
        - /tmp/{{ project_fullname | default('') }}_{{ inventory_hostname }}_70-persistent-net.rules
        - /tmp/{{ project_fullname | default('') }}_{{ inventory_hostname }}_nmcli.sh

    # This is for the case where netplan is present on a system but nmcli is used for configuration
    # For an example Ubuntu that has issues when configuring many IPs for a single interface
    - name: Removing any existing netplan configuration file(s)...
      ansible.builtin.uri:
        url: https://{{ vmware_defaults.hostname }}/api/vcenter/vm/{{ created_vm_info.value[0].vm
          | default(vcenter_vm_info.value[0].vm) }}/guest/processes?action=create
        method: POST
        headers:
          vmware-api-session-id: "{{ vcenter_session_api_key.json }}"
        body:
          credentials: "{{ rest_api_credentials }}"
          spec:
            arguments: -c "rm -rf /etc/netplan/*"
            path: /bin/bash
        status_code: 201
        body_format: json
        validate_certs: "{{ validate_vmware_certs }}"
      retries: 3
      register: network_config_command

    - name: Including command run check task...
      ansible.builtin.include_tasks: command_run_check.yml

    - name: Configuring network...
      ansible.builtin.uri:
        url: https://{{ vmware_defaults.hostname }}/api/vcenter/vm/{{ created_vm_info.value[0].vm
          | default(vcenter_vm_info.value[0].vm) }}/guest/processes?action=create
        method: POST
        headers:
          vmware-api-session-id: "{{ vcenter_session_api_key.json }}"
        body:
          credentials: "{{ rest_api_credentials }}"
          spec:
            arguments: /tmp/{{ project_fullname | default('') }}_{{ inventory_hostname }}_nmcli.sh
            path: /bin/bash
        status_code: 201
        body_format: json
        validate_certs: "{{ vmware_defaults.validate_certs }}"
      register: network_config_command

    - name: Including command run check task...
      ansible.builtin.include_tasks: command_run_check.yml

    # Reboot is required for udev rules to take effect
    - name: Restarting {{ custom_vm_name | default(vm_name) }} VM...
      ansible.builtin.include_role:
        name: nova.core.powerstate
      vars:
        restart: true
