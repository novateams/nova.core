---
- name: Installing required packages for domain join...
  ansible.builtin.package:
    name:
      - adcli
      - libnss-sss
      - ntp
      - ntpdate
      - oddjob
      - oddjob-mkhomedir
      - packagekit
      - policykit-1
      - python3-pip
      - realmd
      - samba-common
      - sssd
      - sssd-tools
    state: present
    update_cache: true
  register: domain_join_packages
  until: not domain_join_packages.failed

- name: Install pexpect...
  ansible.builtin.pip:
    name: pexpect

- name: Templating krb5.conf...
  ansible.builtin.template:
    src: krb5.conf
    dest: /etc/krb5.conf
    force: "true"
    owner: root
    mode: "644"

- name: Starting & enabling realmd service...
  ansible.builtin.systemd:
    name: realmd
    state: started
    enabled: true

- name: Checking if machine already is domain joined...
  ansible.builtin.command: /usr/sbin/realm list
  changed_when: true
  register: realm_state

- name: Removing {{ hostname }} from domain...
  ansible.builtin.command: /usr/sbin/realm leave
  changed_when: true
  when: realm_state.stdout_lines != []

- name: Joining {{ hostname }} to {{ ad_domain_name }}...
  ansible.builtin.expect:
    command: /usr/sbin/realm join --user={{ domain_join_user }} {{ ad_domain_name }} --install=/ --computer-ou {{ computer_ou | default('CN=Computers,' + domain_dn) }}
    responses:
      (?i)Password for *: "{{ domain_join_password }}"
  register: domain_join_state
  until: domain_join_state.rc == 0
  retries: 3
  delay: 3

- name: Creating user home folder automatically...
  ansible.builtin.command: pam-auth-update --enable mkhomedir
  changed_when: true

- name: Updating sssd.conf v1...
  ansible.builtin.lineinfile:
    dest: /etc/sssd/sssd.conf
    line: "{{ item.line }}"
    insertafter: "{{ item.insertafter }}"
  loop:
    - insertafter: ^\[sssd\]
      line: default_domain_suffix = {{ ad_domain_name }}

    - insertafter: ^\[domain/{{ ad_domain_name }}\]
      line: ad_gpo_map_remote_interactive = +xrdp-sesman, +vmtoolsd # Allowing RDP login when ad_gpo_access_control = enforcing

    - insertafter: ^\[domain/{{ ad_domain_name }}\]
      line: ad_gpo_access_control = enforcing
  notify: Restarting sssd service...

- name: Updating sssd.conf v2...
  ansible.builtin.lineinfile:
    path: /etc/sssd/sssd.conf
    regexp: "{{ sssd.regexp }}"
    line: "{{ sssd.line }}"
  loop_control:
    loop_var: sssd
  loop:
    - regexp: ^services = nss
      line: services = nss, pam, sudo
    - regexp: ^default_shell =
      line: default_shell = /bin/bash
  notify: Restarting sssd service...

- name: Allowing sudo for members of {{ ad_sudo_group }}... # Defaults to Domain Admins
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    line: "%{{ ad_sudo_group }}@{{ ad_domain_name }} ALL=(ALL) NOPASSWD: ALL"
    insertafter: ^%sudo

- name: Rebooting on finalize..
  ansible.builtin.set_fact:
    reboot_on_finalize: true
  when: realm_state.stdout_lines == []
