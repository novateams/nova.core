---
- name: Installing required Linux packages for domain join...
  ansible.builtin.package:
    name:
      - adcli
      - oddjob
      - oddjob-mkhomedir
      - python3-pexpect
      - realmd
      - samba-common
      - sssd
      - sssd-tools
    state: present
    update_cache: true
  register: domain_join_packages
  until: not domain_join_packages.failed

- name: Starting & enabling realmd service...
  ansible.builtin.systemd:
    name: realmd
    state: started
    enabled: true

- name: Verifying domain trust...
  ansible.builtin.command: /usr/sbin/adcli testjoin --domain {{ ad_domain_name }}
  changed_when: true
  failed_when: domain_joined.rc not in [0, 3] # 3 is the return code for broken trust or not joined
  register: domain_joined

- name: (Re)Adding host to domain...
  when: domain_joined.rc == 3
  block:
    - name: Checking if machine was previously domain joined...
      ansible.builtin.command: /usr/sbin/realm list
      changed_when: true
      register: realm_state

    - name: Removing {{ hostname }} from domain...
      ansible.builtin.command: /usr/sbin/realm leave
      changed_when: true
      when: realm_state.stdout_lines != []

    - name: Joining {{ hostname }} to {{ ad_domain_name }}...
      ansible.builtin.expect:
        command:
          /usr/sbin/realm join --user={{ domain_join_user }} {{ ad_domain_name }} --install=/ --computer-ou {{ computer_ou
          | default('CN=Computers,' + domain_dn) }}
        responses:
          (?i)Password for *: "{{ domain_join_password }}"
      register: domain_join_state
      until: domain_join_state.rc == 0
      retries: 3
      delay: 3
      notify: "{{ 'join_domain_reboot' if not join_domain_reboot_linux_immediately else omit }}"

- name: Creating user home folder automatically...
  ansible.builtin.command: pam-auth-update --enable mkhomedir
  changed_when: true
  when: ansible_os_family == "Debian"

- name: Creating user home folder automatically for RedHat...
  when: ansible_os_family == "RedHat"
  block:
    - name: Installing required packages for {{ ansible_os_family }}...
      ansible.builtin.package:
        name: authconfig
        state: present
        update_cache: true

    - name: Creating user home folder automatically for {{ ansible_os_family }}...
      ansible.builtin.command: authconfig --enablemkhomedir --update
      changed_when: true

- name: Updating domain related config...
  ansible.builtin.lineinfile:
    dest: "{{ item.dest }}"
    line: "{{ item.line | default(omit) }}"
    regexp: "{{ item.regexp | default(omit) }}"
    insertafter: "{{ item.insertafter | default(omit) }}"
    state: "{{ item.state | default('present') }}"
    mode: "0600"
  loop:
    - dest: /etc/sssd/sssd.conf
      insertafter: ^\[sssd\]
      regexp: ^default_domain_suffix =.*
      line: default_domain_suffix = {{ ad_domain_name }}

    # Allowing RDP login when ad_gpo_access_control = enforcing
    - dest: /etc/sssd/sssd.conf
      insertafter: ^\[domain/{{ ad_domain_name }}\]
      regexp: ^ad_gpo_map_remote_interactive =.*
      line: ad_gpo_map_remote_interactive = +xrdp-sesman, +vmtoolsd

    - dest: /etc/sssd/sssd.conf
      insertafter: ^\[domain/{{ ad_domain_name }}\]
      regexp: ^ad_gpo_access_control =.*
      line: ad_gpo_access_control = enforcing

    # SSSD manages the services itself
    - dest: /etc/sssd/sssd.conf
      regexp: ^services =.*
      state: absent

    # Defaults to Domain Admins
    - dest: /etc/sudoers
      regexp: .*{{ ad_domain_name }}.*
      line: "%{{ ad_sudo_group }}@{{ ad_domain_name }} ALL=(ALL) NOPASSWD: ALL"
      insertafter: ^%sudo
  notify: Restarting sssd service...

- name: Rebooting immediately after joining domain...
  ansible.builtin.reboot:
  when: join_domain_reboot_linux_immediately
