---
- name: Including Linux in Cloud configuration tasks...
  ansible.builtin.include_tasks: linux_cloud.yml
  when: infra_env in ["aws", "linode", "azure"]

- name: Adding temp hostname... # This is so that sudo will not hang due to unknown hostname
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: ^127.0.1.2
    line: 127.0.1.2       {{ fqdn }} {{ hostname }}

- name: Setting hostname...
  ansible.builtin.hostname:
    name: "{{ hostname }}"
  register: linux_hostname_changed

- name: Rebooting...
  ansible.builtin.reboot:
  when:
    - os_configuration_linux_reboot_after_hostname_change # In some cases it might be required to reboot after hostname change
    - linux_hostname_changed.changed

- name: Adding hostname in hosts file...
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: ^127.0.1.1
    line: 127.0.1.1       {{ fqdn }} {{ hostname }}
    insertafter: ^127.0.0.1.*
    state: present

- name: Making sure locale exists...
  community.general.locale_gen:
    name: "{{ os_configuration_locale }}"
    state: present
  when: ansible_os_family != 'RedHat'

- name: Setting the default locale...
  block:
    - name: Setting the default locale...
      ansible.builtin.command: localectl set-locale LANG={{ os_configuration_locale }} LANGUAGE={{ os_configuration_locale }}
      changed_when: true

  rescue:
    # It has happened that for latest Debian versions the localectl command is broken
    # Using lineinfile as a workaround if that happens
    - name: Setting the default locale (rescue)...
      ansible.builtin.lineinfile:
        path: /etc/locale.conf
        regexp: ^LANG=
        line: LANG={{ os_configuration_locale }}
        mode: "0644"

- name: Enabling SSH forwarding for sudo...
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    insertafter: ^#?\s*Defaults\s+env_keep\b
    line: Defaults    env_keep += "SSH_AUTH_SOCK"

- name: Removing temp hostname...
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: ^127.0.1.2
    state: absent

- name: Adding custom values to hosts file...
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: .* {{ item.host }}.*
    line: "{{ item.ip }}       {{ item.host }}"
    state: present
  loop: "{{ hosts_file_values }}"
  when: hosts_file_values != []

- name: Templating custom resolv.conf...
  ansible.builtin.template:
    src: resolv.conf
    dest: /etc/resolv.conf
    mode: "0644"
    lstrip_blocks: true
  when: resolv_conf_dns_servers != []

- name: Set NTP server for Debian and Archlinux like OS...
  when:
    - ntp_servers != []
    - ansible_os_family in [ "Debian", "Archlinux" ]
  block:
    - name: Check if timesyncd.conf file exists...
      ansible.builtin.stat:
        path: /etc/systemd/timesyncd.conf
      register: timesyncd_conf_exists

    - name: Setting following NTP servers in timesyncd.conf...
      ansible.builtin.lineinfile:
        dest: /etc/systemd/timesyncd.conf
        line: "{{ item.line }}"
        regexp: "{{ item.regexp }}"
        state: present
      loop_control:
        label: "{{ item.line }}"
      loop:
        - line: NTP={{ ntp_servers | join(' ') }}
          regexp: "^[#]?NTP="
      when: timesyncd_conf_exists.stat.exists
      notify: restart_systemd_timesyncd

- name: Set NTP server for ReadHat like OS...
  when:
    - ntp_servers != []
    - ansible_os_family in [ "RedHat" ]
  block:
    - name: Check if chrony.conf file exists...
      ansible.builtin.stat:
        path: /etc/chrony.conf
      register: chrony_conf_exists

    - name: Configuring NTP in chrony.conf...
      when: chrony_conf_exists.stat.exists
      block:
        - name: Remove existing NTP servers from chrony.conf...
          ansible.builtin.lineinfile:
            dest: /etc/chrony.conf
            state: absent
            regexp: .*iburst

        - name: Setting following NTP servers in chrony.conf...
          ansible.builtin.lineinfile:
            dest: /etc/chrony.conf
            line: pool {{ item }} iburst
            insertafter: "^# Please consider"
            firstmatch: true
            state: present
          loop_control:
            label: "{{ item }}"
          loop: "{{ ntp_servers }}"
          notify: restart_chronyd

- name: Waiting until {{ wait_for_address }} is reachable...
  ansible.builtin.wait_for:
    host: "{{ wait_for_address }}"
    port: "{{ wait_for_port }}"
    timeout: "{{ wait_for_timeout }}"
  when: wait_for_host

- name: Waiting until {{ os_configuration_wait_for_site_url }} is responding...
  ansible.builtin.uri:
    url: "{{ os_configuration_wait_for_site_url }}"
    method: GET
  register: wait_for_site_result
  until: wait_for_site_result.status == 200
  retries: "{{ os_configuration_wait_for_site_retries }}"
  delay: 10
  when: os_configuration_wait_for_site

- name: Regenerating Snakeoil certificates...
  ansible.builtin.shell: "{{ lookup('template', 'regenerate-snakeoil-certificates.sh') }}"
  args:
    executable: /bin/bash
  register: regenerate_snakeoil_certs
  changed_when: regenerate_snakeoil_certs.stdout == "done"

- name: Regenerating machine-id & host ssh keys...
  ansible.builtin.shell: "{{ lookup('template', 'regenerate-machine-id.sh') }}"
  args:
    executable: /bin/bash
  register: regenerate_machine_id
  changed_when: regenerate_machine_id.stdout != "done"
  retries: 5
  delay: 3

- name: Restarting required services... # noqa: no-handler
  when: regenerate_machine_id.changed
  block:
    - name: Checking if systemd-journald service exists...
      ansible.builtin.systemd:
        name: systemd-journald
      register: systemd_journald_service_exists

    - name: Restarting systemd-journald... # This required for journalctl to work properly after machine-id regeneration
      ansible.builtin.systemd:
        name: systemd-journald
        state: restarted
      when: systemd_journald_service_exists.status.LoadState in ["enabled", "loaded"]

    - name: Checking if NetworkManager service exists...
      ansible.builtin.systemd:
        name: NetworkManager.service
      register: networkmanager_service_exists

    - name: Restarting NetworkManager... # This required for DNS to work properly after machine-id regeneration
      ansible.builtin.systemd:
        name: NetworkManager.service
        state: restarted
      when: networkmanager_service_exists.status.LoadState in ["enabled", "loaded"]
