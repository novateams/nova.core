---
- name: Including non-containers account tasks block...
  when:
    - customization_context == "host" # Alternative is container and then it doesn't need os_configuration
    - infra_env != "my_host" # my_host is computer where you run the play from
  block:
    - name: Configuring non-Network OS ...
      when:
        - ansible_network_os is not defined
        - "'os_macos' not in group_names"
      block:
        - name: Including Windows configuration tasks...
          ansible.builtin.include_tasks: windows.yml
          when: ansible_system == "Win32NT"

        - name: Including Linux configuration tasks...
          ansible.builtin.include_tasks: linux.yml
          when: ansible_system == "Linux"

        - name: Including FreeBSD configuration tasks...
          ansible.builtin.include_tasks: freebsd.yml
          when: ansible_system == "FreeBSD"

    - name: Configuring Network OS...
      when: ansible_network_os is defined
      block:
        - name: Including RouterOS configuration tasks...
          ansible.builtin.include_tasks: routeros.yml
          when: ansible_network_os == 'community.routeros.routeros'

        - name: Including VyOS configuration tasks...
          ansible.builtin.include_tasks: vyos.yml
          when: ansible_network_os == 'vyos.vyos.vyos'

        - name: Including IOS configuration tasks...
          ansible.builtin.include_tasks: ios.yml
          when: ansible_network_os == 'cisco.ios.ios'

        - name: Including FortiOS configuration tasks...
          ansible.builtin.include_tasks: fortios.yml
          when: ansible_network_os == 'fortinet.fortios.fortios'

        - name: Including pfSense configuration tasks...
          ansible.builtin.include_tasks: pfsense.yml
          when: ansible_network_os == 'pfsense'

        - name: Including Opnsense configuration tasks...
          include_tasks: opnsense.yml
          when: ansible_network_os == 'opnsense'

    - name: Including MacOS configuration tasks...
      ansible.builtin.include_tasks: macos.yml
      when: "'os_macos' in group_names"

    # Since there can be so many different partitioning methods and file systems we'll leave to the user to create a role that matches their templates
    # When `os_configuration_expand_os_disk_role_name` variable is defined then the role will be included here
    - name: Including OS disk expansion role...
      ansible.builtin.include_role:
        name: "{{ os_configuration_expand_os_disk_role_name }}"
      when:
        - infra_env == 'vsphere'
        - os_configuration_expand_os_disk_role_name != {}

    - name: Including nova.core.trusted_certificates role...
      ansible.builtin.include_role:
        name: nova.core.trusted_certificates
      when: install_trusted_certificates

    - name: Including following post-os_configuration roles...
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop: "{{ os_configuration_post_roles }}"
      when: os_configuration_post_roles != []

    - name: Flushing handlers...
      ansible.builtin.meta: flush_handlers

    # This needs to be last because the play stops after that
    - name: Including if just_clone is defined...
      when: just_clone
      block:
        - name: Including snapshots role...
          ansible.builtin.include_role:
            name: nova.core.snapshots
          vars:
            snapshot_mode: snap
            live_snap: true
            snapshot_name: Pre-customization

        - name: Including get_ip role...
          ansible.builtin.include_role:
            name: nova.core.get_ip

        - name: Stopping play...
          ansible.builtin.meta: end_host
