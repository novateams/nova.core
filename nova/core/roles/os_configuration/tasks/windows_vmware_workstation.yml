---
- name: Setting VMTools to auto update...
  when: os_configuration_vmware_workstation_vmtools_autoupdate
  become: false
  block:
    - name: Setting correct connection parameters for VMware Workstation host...
      ansible.builtin.set_fact:
        ansible_host: "{{ os_configuration_vmware_workstation_host }}"
        ansible_user: "{{ os_configuration_vmware_workstation_user }}"
        ansible_connection: "{{ os_configuration_vmware_workstation_connection }}"
        ansible_shell_type: "{{ os_configuration_vmware_workstation_shell_type }}"
        ansible_python_interpreter: "{{ os_configuration_vmware_workstation_python_interpreter }}"

    # Using lineinfile to check for file changes because it simpler and faster then reading the file and comparing it with the desired state
    - name: Checking VMTools auto-update state for {{ custom_vm_name | default(vm_name) }}...
      ansible.builtin.lineinfile:
        path: "{{ os_configuration_local_vmx_path }}"
        regex: tools.upgrade.policy.*
        line: tools.upgrade.policy = "upgradeAtPowerCycle"
        state: present
      register: vmtools_autoupdate

    - name: Configuring VMTools auto-update... # noqa: no-handler
      when: vmtools_autoupdate.changed
      block:
        - name: Upgrading VMTools for {{ custom_vm_name | default(vm_name) }}...
          ansible.builtin.command: vmcli tools upgrade {{ os_configuration_local_vmx_path }}
          changed_when: true

        - name: Setting VMTools to upgrade on boot for {{ custom_vm_name | default(vm_name) }}...
          ansible.builtin.command: vmcli configparams setentry tools.upgrade.policy upgradeAtPowerCycle {{ os_configuration_local_vmx_path }}
          changed_when: true

    - name: Getting IP address for {{ inventory_hostname }}...
      ansible.builtin.command: vmrun getGuestIPAddress {{ machine_operations_local_vmx_path }} -wait
      changed_when: false
      register: vmip
      retries: 60
      delay: 3
      until:
        - vmip.rc == 0
        - vmip.stdout != "unknown"
        - vmip.stdout is ansible.utils.ipv4 # Waiting until IP address is a valid IPv4 address

    - name: Setting {{ vmip.stdout }} for connection to {{ inventory_hostname }}...
      ansible.builtin.set_fact:
        ansible_host: "{{ vmip.stdout }}"
        primary_ipv4: "{{ vmip.stdout }}"

    # Re-including the connection role to reset the connection parameters
    - name: Re-Including the connection role for {{ custom_vm_name | default(vm_name) }}...
      ansible.builtin.include_role:
        name: nova.core.connection
      vars:
        fresh_deploy: false # When the deploy has gotten to this point the accounts have already been created
