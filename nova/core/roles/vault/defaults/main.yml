---
environment_name: # Name of the environment (e.g. dev, test, prod)
project_fullname: # Full name of the project (e.g. My Project)
fqdn: {} # FQDN of the server vault.example.org
docker_network: local-network # The network where the container will be attached to. Comes from nova.core.docker role.
vault_proxy_container_name: {} # Name of the proxy container to restart after composing Vault.

vault_configure: false # Run the initial default configuration for Vault
vault_configure_ldap: false # Configuring LDAP authentication for Vault
vault_configuration_uri: "https://{{ fqdn }}" # Defined separately for when configuring multiple Vaults
vault_config_folder: /srv/vault
vault_version: 1.19.5 # Default Vault Docker image version
vault_container_name: vault
vault_server_log_level: debug # Debug gives better info about LDAP login failures and their reasons
vault_audit_logging: false # Enable Vault audit logging
vault_validate_cert: true # Validate certificates when connecting to Vault

# Disable for production environments and manually enter the unseal key(s) after container restart. Only works if vault_unseal_shares == 1
vault_auto_unseal: true

vault_root_token: {} # Used for testing purposes only, save it in a safe place and use ansible lookup modules to retrieve it
vault_unseal_key: {} # Used for testing purposes only, save it in a safe place and use it to unseal the Vault after container restart

vault_unseal_shares: 1 # Number of shares to split the unseal key into
vault_unseal_threshold: 1 # Number of shares required to unseal the Vault

# Certificate Authority variables
vault_crl_fqdn: "{{ egress_nic_ipv4 }}" # egress_nic_ipv4 comes from nova.core.deploy_vars
vault_aia_fqdn: "{{ egress_nic_ipv4 }}" # egress_nic_ipv4 comes from nova.core.deploy_vars

vault_create_root_ca: false # Create a self-signed root CA(s)
vault_root_cas:
  - vault_root_ca_pki_engine_name: RootCA
    vault_root_ca_name: "{{ environment_name }} {{ project_fullname }} RootCA"
    vault_root_ca_ou: "{{ project_fullname }}"
    vault_root_ca_org: "{{ environment_name }}"
    vault_root_ca_country: US
    vault_root_ca_key_type: ECC # https://docs.ansible.com/ansible/latest/collections/community/crypto/openssl_privatekey_pipe_module.html#parameter-type
    vault_root_ca_key_curve: secp384r1 # https://docs.ansible.com/ansible/latest/collections/community/crypto/openssl_privatekey_module.html#parameter-curve
    vault_root_ca_key_bits: 384
    vault_root_ca_crl_distribution_points: http://{{ vault_crl_fqdn }}/v1/RootCA/crl/pem
    vault_root_ca_issuing_certificates: http://{{ vault_aia_fqdn }}/v1/RootCA/ca/pem
    # Uncomment to enable more key usages
    vault_root_ca_key_usage:
      - digitalSignature
      - Certificate Sign
      - cRLSign

      # - keyAgreement
      # - Non Repudiation
      # - Key Encipherment
      # - dataEncipherment
      # - Encipher Only
      # - decipherOnly

    # Uncomment to enable extended key usages
    # vault_root_ca_extended_key_usage:
    #   - anyExtendedKeyUsage
    #   - clientAuth
    #   - codeSigning
    #   - emailProtection
    #   - ipsecIKE
    #   - msCodeCom
    #   - msCodeInd
    #   - msCTLSign
    #   - msEFS
    #   - msEFSFR
    #   - msSGC
    #   - msTimestamp
    #   - nsSGC
    #   - OCSPSigning
    #   - serverAuth
    #   - smartcardLogon
    #   - timeStamping

vault_create_intermediate_ca: false # Create an intermediate CA(s) (signed by the root CA(s))
vault_intermediate_cas:
  - vault_intermediate_ca_pki_engine_name: IntermediateCA
    vault_intermediate_ca_root_to_sign_with_name: RootCA # This is the name of the root CA to sign the intermediate CA with
    vault_intermediate_ca_name: "{{ environment_name }} {{ project_fullname }} IntermediateCA"
    vault_intermediate_ca_ou: "{{ project_fullname }}"
    vault_intermediate_ca_org: "{{ environment_name }}"
    vault_intermediate_ca_country: US
    vault_intermediate_ca_key_type: ec
    vault_intermediate_ca_key_bits: 384
    vault_intermediate_ca_crl_distribution_points: http://{{ vault_crl_fqdn }}/v1/IntermediateCA/crl/pem
    vault_intermediate_ca_issuing_certificates: http://{{ vault_aia_fqdn }}/v1/IntermediateCA/ca/pem
    # List of roles to create under the intermediate CA for requesting leaf certificates
    # Set to vault_intermediate_ca_roles == [] to not create any roles
    vault_intermediate_ca_roles: "{{ vault_intermediate_ca_roles_defaults }}"

# If no vault_intermediate_ca_roles is defined in the vault_intermediate_cas list then the following defaults will be used
vault_intermediate_ca_roles_defaults:
  # RSA Client/Server certificate
  - vault_cert_path: server_rsa
    vault_cert_key_bits: 4096
    vault_cert_key_type: rsa
    vault_cert_ou: "{{ project_fullname }}"
    vault_cert_organization: "{{ environment_name }}"
    vault_cert_country: US
    vault_cert_code_signing: false

  # EC Client/Server certificate
  - vault_cert_path: server_ec
    vault_cert_key_bits: 256
    vault_cert_key_type: ec
    vault_cert_ou: "{{ project_fullname }}"
    vault_cert_organization: "{{ environment_name }}"
    vault_cert_country: US
    vault_cert_code_signing: false

  - vault_cert_path: code_signing
    vault_cert_key_bits: 384
    vault_cert_key_type: ec
    vault_cert_ou: "{{ project_fullname }}"
    vault_cert_organization: "{{ environment_name }}"
    vault_cert_country: US
    vault_cert_code_signing: true

vault_create_mitm_ca: false # Create a Man-in-the-Middle (TLS termination) CA(s)
vault_mitm_cas:
  - vault_mitm_ca_pki_engine_name: MitMCA
    vault_mitm_ca_root_to_sign_with_name: RootCA # This is the name of the root CA to sign the MitM CA with
    vault_mitm_ca_name: "{{ environment_name }} {{ project_fullname }} MiTMCA"
    vault_mitm_ca_ou: "{{ project_fullname }}"
    vault_mitm_ca_org: "{{ environment_name }}"
    vault_mitm_ca_country: US
    vault_mitm_ca_key_type: ec
    vault_mitm_ca_key_bits: 384
    vault_mitm_ca_crl_distribution_points: http://{{ vault_crl_fqdn }}/v1/MiTMCA/crl/pem
    vault_mitm_ca_issuing_certificates: http://{{ vault_aia_fqdn }}/v1/MiTMCA/ca/pem

# LDAPs configuration
vault_ldap_engine_name: ldap
vault_ldap_admin_group_name: vault_admins # This is the AD group that will have full access to Vault

# Policies
vault_policies: [] # List of policies to create and map to LDAP groups when needed. Refer to README.md for an example

vault_ldap_configuration:
  anonymous_group_search: false
  binddn: "{{ vault_binddn }}"
  bindpass: "{{ vault_bindpass }}"
  case_sensitive_names: false
  certificate: "{{ vault_ldaps_certificate_file.content | b64decode }}"
  deny_null_bind: true
  discoverdn: false
  groupattr: sAMAccountName
  groupdn: "{{ vault_groupdn }}"
  groupfilter: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{ '{{.UserDN}}' }}))
  insecure_tls: false
  request_timeout: 120
  starttls: false
  tls_max_version: tls12
  tls_min_version: tls12
  upndomain: "{{ vault_upndomain | default(domain) }}"
  url: "{{ vault_ldaps_url }}" # Can use multiple URLs separated by comma
  use_pre111_group_cn_behavior: false
  use_token_groups: true
  userattr: samaccountname
  userdn: "{{ vault_userdn }}"
  username_as_alias: false

# On 2038-01-19 UNIX epoch will not fit into 32-bit signed integer. This may
# cause issues on some software. Taking into account timezones, 2038-01-17
# is the last Y2038 safe day.
vault_y2038_hours_left: "{{ (2147292000 - (ansible_date_time.epoch | int)) / 3600 | round | int }}"
