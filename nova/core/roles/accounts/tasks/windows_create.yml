---
- name: Configuring Domain Organizational Units...
  ansible.builtin.include_tasks: create_domain_ous.yml
  when: ansible_facts.windows_domain_role == "Primary domain controller"

- name: Configuring Domain groups...
  ansible.builtin.include_tasks: create_domain_groups.yml
  when: ansible_facts.windows_domain_role == "Primary domain controller"

- name: Configuring local accounts...
  when:
    - ansible_facts.windows_domain_role != "Primary domain controller"
    - ansible_facts.windows_domain_role != "Backup domain controller"
  block:
    - name: Creating following local accounts...
      ansible.windows.win_user:
        groups_action: add
        groups: "{{ item.groups | default(windows_admin_groups if item.username in admin_accounts | map(attribute='username') else omit) }}"
        name: "{{ item.username }}"
        password_never_expires: true
        password: "{{ item.password }}"
        state: present
        update_password: "{{ item.update_password | default('always') }}" # always or on_create
      register: created_account
      loop: "{{ local_accounts_with_password }}"
      loop_control:
        label: "{{ item.username }}"

    - name: Setting correct password for {{ ansible_deployer_username }}...
      ansible.builtin.set_fact:
        ansible_deployer_password: "{{ admin_accounts_with_password
          | selectattr('username', 'equalto', ansible_deployer_username) | map(attribute='password') | first }}"
      when: created_account.results | selectattr('changed', 'equalto', true) | map(attribute='item.username')
        | list | intersect([ansible_deployer_username]) | length > 0

- name: Checking and creating domain accounts...
  when: ansible_facts.windows_domain_role == "Primary domain controller"
  block:
    - name: DC post-reboot availability check... # Sometimes DCs are not available right after initial deployment if they are not sysprepped
      ansible.builtin.include_role:
        name: nova.core.win_dc_post_reboot_check

    - name: Creating following domain accounts...
      microsoft.ad.user:
        description: "{{ item.description | default(omit) }}"
        display_name: "{{ item.display_name | default(omit) }}"
        email: "{{ item.email | default(omit) }}"
        identity: "{{ item.username }}"
        name: "{{ item.display_name | default(item.username) }}"
        password_never_expires: true
        password: "{{ item.password }}"
        path: "{{ item.ou | default(omit) }}"
        sam_account_name: "{{ item.username[:20] }}" # https://docs.microsoft.com/en-us/windows/win32/adschema/a-samaccountname
        spn: "{{ item.spn | default(omit) }}" # https://docs.ansible.com/ansible/latest/collections/microsoft/ad/user_module.html#parameter-spn
        state: present
        update_password: "{{ item.update_password | default('always') }}" # always, on_create or when_changed
        upn: "{{ item.username }}@{{ ad_domain_name }}"
        groups:
          add: "{{ item.groups | default(windows_domain_admin_groups if item.username in admin_accounts | map(attribute='username') else omit) }}"
      register: win_domain_user
      loop: "{{ domain_accounts_with_password }}"
      loop_control:
        label: "{{ item.username }}"

# To make sure that we are setting the password for the correct account on all domain contollers
- name: Setting correct password for {{ ansible_deployer_username }}...
  ansible.builtin.set_fact:
    ansible_deployer_password: "{{ admin_accounts_with_password
      | selectattr('username', 'equalto', ansible_deployer_username) | map(attribute='password') | first }}"
  when:
    - ansible_windows_domain_role in ["Primary domain controller", "Backup domain controller"]
    - win_domain_user.results | selectattr('changed', 'equalto', true) | map(attribute='item.username')
      | list | intersect([ansible_deployer_username]) | length > 0

- name: Creating a profiles for...
  ansible.windows.win_user_profile:
    username: "{{ item.username }}"
    name: "{{ item.username }}"
    state: present
  loop: "{{ accounts }}"
  loop_control:
    label: "{{ item.username }}"
  when: item.username not in domain_user_accounts | map(attribute='username') # This to avoid configuring domain users on DCs

- name: Adding account creation source flag for following admin accounts...
  community.windows.win_lineinfile:
    path: C:\Users\{{ item.username }}\.created
    line: This account was created with {{ ansible_role_name }} role
    state: present
    create: true
  loop: "{{ accounts }}"
  loop_control:
    label: "{{ item.username }}"
  when:
    - item.username not in domain_user_accounts | map(attribute='username') # This to avoid removing domain users on DCs
    - item.username != admin_account # Cannot remove admin (usually Administrator) account

- name: Creating .ssh directories for...
  ansible.windows.win_file:
    path: C:\Users\{{ item.username }}\.ssh
    state: directory
  loop: "{{ accounts }}"
  loop_control:
    label: "{{ item.username }}"
  when: item.ssh_key is defined

- name: Replacing authorized_keys file for...
  ansible.windows.win_copy:
    content: "{{ item.ssh_key }}"
    dest: C:\Users\{{ item.username }}\.ssh\authorized_keys
  loop: "{{ accounts }}"
  loop_control:
    label: "{{ item.username }}"
  when:
    - item.ssh_key is defined
    - item.ssh_key_exclusive | default(accounts_exclusive_ssh_key)

- name: Adding ssh public keys for...
  community.windows.win_lineinfile:
    path: C:\Users\{{ item.username }}\.ssh\authorized_keys
    line: "{{ item.ssh_key }}"
    create: true
  loop: "{{ accounts }}"
  loop_control:
    label: "{{ item.username }}"
  when:
    - item.ssh_key is defined
    - not item.ssh_key_exclusive | default(accounts_exclusive_ssh_key)

- name: Creating administrators_authorized_keys file...
  ansible.windows.win_file:
    path: C:\ProgramData\ssh\administrators_authorized_keys
    state: touch

- name: Adding administrators_authorized_keys public keys for admins...
  community.windows.win_lineinfile:
    path: C:\ProgramData\ssh\administrators_authorized_keys
    line: "{{ item.ssh_key }}"
    create: true
  loop: "{{ admin_accounts_with_password }}"
  loop_control:
    label: "{{ item.username }}"
  when:
    - item.username == ansible_deployer_username # Because C:\ProgramData\ssh\administrators_authorized_keys supports only one key
    - item.ssh_key is defined

- name: Setting correct administrators_authorized_keys permissions...
  ansible.windows.win_shell: icacls.exe C:\ProgramData\ssh\administrators_authorized_keys /inheritance:r /grant "Administrators:F" /grant "SYSTEM:F"
