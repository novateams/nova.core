---
- name: Configuring Domain Organizational Units...
  ansible.builtin.include_tasks: create_domain_ous.yml
  when: ansible_facts.windows_domain_role == "Primary domain controller"

- name: Configuring Domain groups...
  ansible.builtin.include_tasks: create_domain_groups.yml
  when: ansible_facts.windows_domain_role == "Primary domain controller"

- name: Creating following local accounts...
  ansible.windows.win_user:
    name: "{{ item.username }}"
    password: "{{ item.password | default(random_generated_password if not save_secrets_to_vault else pregenerated_password) }}"
    password_never_expires: true
    state: present
    groups_action: add
    groups: "{{ item.groups | default(windows_admin_groups if item.username in admin_accounts | map(attribute='username') else omit) }}"
  loop: "{{ local_accounts_list }}"
  loop_control:
    label: "{{ item.username }}"
  when:
    - ansible_facts.windows_domain_role != "Primary domain controller"
    - ansible_facts.windows_domain_role != "Backup domain controller"

- name: Checking and creating domain accounts...
  when: ansible_facts.windows_domain_role == "Primary domain controller"
  block:
    - name: DC post-reboot availability check... # Sometimes DCs are not available right after initial deployment if they are not sysprepped
      ansible.builtin.include_role:
        name: nova.core.win_dc_post_reboot_check

    - name: Creating following domain accounts...
      microsoft.ad.user:
        sam_account_name: "{{ item.username[:20] }}" # https://docs.microsoft.com/en-us/windows/win32/adschema/a-samaccountname
        name: "{{ item.display_name | default(item.username) }}"
        identity: "{{ item.username }}"
        description: "{{ item.description | default(omit) }}"
        display_name: "{{ item.display_name | default(omit) }}"
        email: "{{ item.email | default(omit) }}"
        upn: "{{ item.username }}@{{ ad_domain_name }}"
        password: "{{ item.password | default(random_generated_password if not save_secrets_to_vault else pregenerated_password) }}"
        password_never_expires: true
        state: present
        path: "{{ item.ou | default(omit) }}"
        groups:
          add: "{{ item.groups | default(windows_domain_admin_groups if item.username in admin_accounts | map(attribute='username') else omit) }}"
      register: win_domain_user
      loop: "{{ domain_accounts_list }}"
      loop_control:
        label: "{{ item.username }}"

- name: Creating a profiles for...
  community.windows.win_user_profile:
    username: "{{ item.username }}"
    name: "{{ item.username }}"
    state: present
  loop: "{{ accounts }}"
  loop_control:
    label: "{{ item.username }}"
  when: item.username not in domain_user_accounts | map(attribute='username') # This to avoid configuring domain users on DCs

- name: Adding account creation source flag for following admin accounts...
  community.windows.win_lineinfile:
    path: C:\Users\{{ item.username }}\.created
    line: This account was created with {{ ansible_role_name }} role
    state: present
    create: true
  loop: "{{ accounts }}"
  loop_control:
    label: "{{ item.username }}"
  when:
    - item.username not in domain_user_accounts | map(attribute='username') # This to avoid removing domain users on DCs
    - item.username != admin_account # Cannot remove admin (usually Administrator) account

- name: Creating .ssh directories for...
  ansible.windows.win_file:
    path: C:\Users\{{ item.username }}\.ssh
    state: directory
  loop: "{{ accounts }}"
  loop_control:
    label: "{{ item.username }}"
  when: item.ssh_key is defined

- name: Adding ssh public keys for...
  community.windows.win_lineinfile:
    path: C:\Users\{{ item.username }}\.ssh\authorized_keys
    line: "{{ item.ssh_key }}"
    create: true
  loop: "{{ accounts }}"
  loop_control:
    label: "{{ item.username }}"
  when: item.ssh_key is defined

- name: Creating administrators_authorized_keys file...
  ansible.windows.win_file:
    path: C:\ProgramData\ssh\administrators_authorized_keys
    state: touch

- name: Adding administrators_authorized_keys public keys for admins...
  community.windows.win_lineinfile:
    path: C:\ProgramData\ssh\administrators_authorized_keys
    line: "{{ item.ssh_key }}"
    create: true
  loop: "{{ admin_accounts }}"
  loop_control:
    label: "{{ item.username }}"
  when:
    - item.username == ansible_deployer_username # Because C:\ProgramData\ssh\administrators_authorized_keys supports only one key
    - item.ssh_key is defined

- name: Setting correct administrators_authorized_keys permissions...
  ansible.windows.win_shell: icacls.exe C:\ProgramData\ssh\administrators_authorized_keys /inheritance:r /grant "Administrators:F" /grant "SYSTEM:F"
